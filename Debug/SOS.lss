
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003df8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00003df8  00003e8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000076  008000c6  008000c6  00003ef2  2**0
                  ALLOC
  3 .stab         000031b0  00000000  00000000  00003ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001412  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000084b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008616  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000087a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b8eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c870  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ccb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <main>
      8a:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 eb       	ldi	r26, 0xB6	; 182
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 eb       	ldi	r24, 0xB6	; 182
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 eb       	ldi	r22, 0xB6	; 182
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_WritePin>:
 */

#include "DIO_operations.h"
#include "Memory_map.h"
void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_WritePin+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	6a 83       	std	Y+2, r22	; 0x02
if(PinValue==1)
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <DIO_WritePin+0x16>
     cb2:	70 c0       	rjmp	.+224    	; 0xd94 <DIO_WritePin+0xf6>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	88 30       	cpi	r24, 0x08	; 8
     cb8:	a0 f4       	brcc	.+40     	; 0xce2 <DIO_WritePin+0x44>
	{
		Set_Bit(PORTA,PinNum);
     cba:	ab e3       	ldi	r26, 0x3B	; 59
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	eb e3       	ldi	r30, 0x3B	; 59
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_WritePin+0x3a>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_WritePin+0x36>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	ce c0       	rjmp	.+412    	; 0xe7e <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	88 30       	cpi	r24, 0x08	; 8
     ce6:	d0 f0       	brcs	.+52     	; 0xd1c <DIO_WritePin+0x7e>
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 31       	cpi	r24, 0x10	; 16
     cec:	b8 f4       	brcc	.+46     	; 0xd1c <DIO_WritePin+0x7e>
	{
		Set_Bit(PORTB,(PinNum-8));
     cee:	a8 e3       	ldi	r26, 0x38	; 56
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e8 e3       	ldi	r30, 0x38	; 56
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9c 01       	movw	r18, r24
     d02:	28 50       	subi	r18, 0x08	; 8
     d04:	30 40       	sbci	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <DIO_WritePin+0x74>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <DIO_WritePin+0x70>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	b1 c0       	rjmp	.+354    	; 0xe7e <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	80 31       	cpi	r24, 0x10	; 16
     d20:	d0 f0       	brcs	.+52     	; 0xd56 <DIO_WritePin+0xb8>
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	88 31       	cpi	r24, 0x18	; 24
     d26:	b8 f4       	brcc	.+46     	; 0xd56 <DIO_WritePin+0xb8>
	{
		Set_Bit(PORTC,(PinNum-16));
     d28:	a5 e3       	ldi	r26, 0x35	; 53
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e5 e3       	ldi	r30, 0x35	; 53
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9c 01       	movw	r18, r24
     d3c:	20 51       	subi	r18, 0x10	; 16
     d3e:	30 40       	sbci	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_WritePin+0xae>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_WritePin+0xaa>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	94 c0       	rjmp	.+296    	; 0xe7e <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	88 31       	cpi	r24, 0x18	; 24
     d5a:	08 f4       	brcc	.+2      	; 0xd5e <DIO_WritePin+0xc0>
     d5c:	90 c0       	rjmp	.+288    	; 0xe7e <DIO_WritePin+0x1e0>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	80 32       	cpi	r24, 0x20	; 32
     d62:	08 f0       	brcs	.+2      	; 0xd66 <DIO_WritePin+0xc8>
     d64:	8c c0       	rjmp	.+280    	; 0xe7e <DIO_WritePin+0x1e0>
	{
		Set_Bit(PORTD,(PinNum-24));
     d66:	a2 e3       	ldi	r26, 0x32	; 50
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e2 e3       	ldi	r30, 0x32	; 50
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	9c 01       	movw	r18, r24
     d7a:	28 51       	subi	r18, 0x18	; 24
     d7c:	30 40       	sbci	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_WritePin+0xec>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_WritePin+0xe8>
     d8e:	84 2b       	or	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	75 c0       	rjmp	.+234    	; 0xe7e <DIO_WritePin+0x1e0>
	}
}
else if(PinValue==0)
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	88 23       	and	r24, r24
     d98:	09 f0       	breq	.+2      	; 0xd9c <DIO_WritePin+0xfe>
     d9a:	71 c0       	rjmp	.+226    	; 0xe7e <DIO_WritePin+0x1e0>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	88 30       	cpi	r24, 0x08	; 8
     da0:	a8 f4       	brcc	.+42     	; 0xdcc <DIO_WritePin+0x12e>
	{
		Clear_Bit(PORTA,PinNum);
     da2:	ab e3       	ldi	r26, 0x3B	; 59
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_WritePin+0x122>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_WritePin+0x11e>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	59 c0       	rjmp	.+178    	; 0xe7e <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	88 30       	cpi	r24, 0x08	; 8
     dd0:	d8 f0       	brcs	.+54     	; 0xe08 <DIO_WritePin+0x16a>
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	80 31       	cpi	r24, 0x10	; 16
     dd6:	c0 f4       	brcc	.+48     	; 0xe08 <DIO_WritePin+0x16a>
	{
		Clear_Bit(PORTB,(PinNum-8));
     dd8:	a8 e3       	ldi	r26, 0x38	; 56
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e8 e3       	ldi	r30, 0x38	; 56
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9c 01       	movw	r18, r24
     dec:	28 50       	subi	r18, 0x08	; 8
     dee:	30 40       	sbci	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_WritePin+0x15e>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_WritePin+0x15a>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	3b c0       	rjmp	.+118    	; 0xe7e <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	80 31       	cpi	r24, 0x10	; 16
     e0c:	d8 f0       	brcs	.+54     	; 0xe44 <DIO_WritePin+0x1a6>
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	88 31       	cpi	r24, 0x18	; 24
     e12:	c0 f4       	brcc	.+48     	; 0xe44 <DIO_WritePin+0x1a6>
	{
		Clear_Bit(PORTC,(PinNum-16));
     e14:	a5 e3       	ldi	r26, 0x35	; 53
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e5 e3       	ldi	r30, 0x35	; 53
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9c 01       	movw	r18, r24
     e28:	20 51       	subi	r18, 0x10	; 16
     e2a:	30 40       	sbci	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_WritePin+0x19a>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_WritePin+0x196>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	1d c0       	rjmp	.+58     	; 0xe7e <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	88 31       	cpi	r24, 0x18	; 24
     e48:	d0 f0       	brcs	.+52     	; 0xe7e <DIO_WritePin+0x1e0>
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	80 32       	cpi	r24, 0x20	; 32
     e4e:	b8 f4       	brcc	.+46     	; 0xe7e <DIO_WritePin+0x1e0>
	{
		Clear_Bit(PORTD,(PinNum-24));
     e50:	a2 e3       	ldi	r26, 0x32	; 50
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e2 e3       	ldi	r30, 0x32	; 50
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9c 01       	movw	r18, r24
     e64:	28 51       	subi	r18, 0x18	; 24
     e66:	30 40       	sbci	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_WritePin+0x1d6>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_WritePin+0x1d2>
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8c 93       	st	X, r24
	}
}
}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <DIO_ReadPin+0x6>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Pin_Value;
	if(PinNum>=PinA0&&PinNum<=PinA7)
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	88 30       	cpi	r24, 0x08	; 8
     e98:	90 f4       	brcc	.+36     	; 0xebe <DIO_ReadPin+0x36>
	{
		Pin_Value=Get_Bit(PINA,PinNum);
     e9a:	e9 e3       	ldi	r30, 0x39	; 57
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_ReadPin+0x2c>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_ReadPin+0x28>
     eb8:	84 23       	and	r24, r20
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	50 c0       	rjmp	.+160    	; 0xf5e <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	88 30       	cpi	r24, 0x08	; 8
     ec2:	c0 f0       	brcs	.+48     	; 0xef4 <DIO_ReadPin+0x6c>
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	80 31       	cpi	r24, 0x10	; 16
     ec8:	a8 f4       	brcc	.+42     	; 0xef4 <DIO_ReadPin+0x6c>
	{
		Pin_Value=Get_Bit(PINB,(PinNum-8));
     eca:	e6 e3       	ldi	r30, 0x36	; 54
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c 01       	movw	r18, r24
     eda:	28 50       	subi	r18, 0x08	; 8
     edc:	30 40       	sbci	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_ReadPin+0x62>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_ReadPin+0x5e>
     eee:	84 23       	and	r24, r20
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	35 c0       	rjmp	.+106    	; 0xf5e <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	80 31       	cpi	r24, 0x10	; 16
     ef8:	c0 f0       	brcs	.+48     	; 0xf2a <DIO_ReadPin+0xa2>
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	88 31       	cpi	r24, 0x18	; 24
     efe:	a8 f4       	brcc	.+42     	; 0xf2a <DIO_ReadPin+0xa2>
	{
		Pin_Value=Get_Bit(PINC,(PinNum-16));
     f00:	e3 e3       	ldi	r30, 0x33	; 51
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9c 01       	movw	r18, r24
     f10:	20 51       	subi	r18, 0x10	; 16
     f12:	30 40       	sbci	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_ReadPin+0x98>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_ReadPin+0x94>
     f24:	84 23       	and	r24, r20
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	1a c0       	rjmp	.+52     	; 0xf5e <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	88 31       	cpi	r24, 0x18	; 24
     f2e:	b8 f0       	brcs	.+46     	; 0xf5e <DIO_ReadPin+0xd6>
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	80 32       	cpi	r24, 0x20	; 32
     f34:	a0 f4       	brcc	.+40     	; 0xf5e <DIO_ReadPin+0xd6>
	{
		Pin_Value=Get_Bit(PIND,(PinNum-24));
     f36:	e0 e3       	ldi	r30, 0x30	; 48
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9c 01       	movw	r18, r24
     f46:	28 51       	subi	r18, 0x18	; 24
     f48:	30 40       	sbci	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_ReadPin+0xce>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_ReadPin+0xca>
     f5a:	84 23       	and	r24, r20
     f5c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Pin_Value;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <DIO_SetPinDirection+0x6>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==1)
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	09 f0       	breq	.+2      	; 0xf80 <DIO_SetPinDirection+0x16>
     f7e:	70 c0       	rjmp	.+224    	; 0x1060 <DIO_SetPinDirection+0xf6>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	88 30       	cpi	r24, 0x08	; 8
     f84:	a0 f4       	brcc	.+40     	; 0xfae <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
     f86:	aa e3       	ldi	r26, 0x3A	; 58
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e3       	ldi	r30, 0x3A	; 58
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_SetPinDirection+0x3a>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_SetPinDirection+0x36>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	ce c0       	rjmp	.+412    	; 0x114a <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	88 30       	cpi	r24, 0x08	; 8
     fb2:	d0 f0       	brcs	.+52     	; 0xfe8 <DIO_SetPinDirection+0x7e>
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	80 31       	cpi	r24, 0x10	; 16
     fb8:	b8 f4       	brcc	.+46     	; 0xfe8 <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
     fba:	a7 e3       	ldi	r26, 0x37	; 55
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e7 e3       	ldi	r30, 0x37	; 55
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9c 01       	movw	r18, r24
     fce:	28 50       	subi	r18, 0x08	; 8
     fd0:	30 40       	sbci	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_SetPinDirection+0x74>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_SetPinDirection+0x70>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	b1 c0       	rjmp	.+354    	; 0x114a <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	80 31       	cpi	r24, 0x10	; 16
     fec:	d0 f0       	brcs	.+52     	; 0x1022 <DIO_SetPinDirection+0xb8>
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	88 31       	cpi	r24, 0x18	; 24
     ff2:	b8 f4       	brcc	.+46     	; 0x1022 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
     ff4:	a4 e3       	ldi	r26, 0x34	; 52
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e4 e3       	ldi	r30, 0x34	; 52
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9c 01       	movw	r18, r24
    1008:	20 51       	subi	r18, 0x10	; 16
    100a:	30 40       	sbci	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_SetPinDirection+0xae>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_SetPinDirection+0xaa>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	94 c0       	rjmp	.+296    	; 0x114a <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	88 31       	cpi	r24, 0x18	; 24
    1026:	08 f4       	brcc	.+2      	; 0x102a <DIO_SetPinDirection+0xc0>
    1028:	90 c0       	rjmp	.+288    	; 0x114a <DIO_SetPinDirection+0x1e0>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	80 32       	cpi	r24, 0x20	; 32
    102e:	08 f0       	brcs	.+2      	; 0x1032 <DIO_SetPinDirection+0xc8>
    1030:	8c c0       	rjmp	.+280    	; 0x114a <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRC,(PinNum-24));
    1032:	a4 e3       	ldi	r26, 0x34	; 52
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e4 e3       	ldi	r30, 0x34	; 52
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	9c 01       	movw	r18, r24
    1046:	28 51       	subi	r18, 0x18	; 24
    1048:	30 40       	sbci	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_SetPinDirection+0xec>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_SetPinDirection+0xe8>
    105a:	84 2b       	or	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	75 c0       	rjmp	.+234    	; 0x114a <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==0)
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	88 23       	and	r24, r24
    1064:	09 f0       	breq	.+2      	; 0x1068 <DIO_SetPinDirection+0xfe>
    1066:	71 c0       	rjmp	.+226    	; 0x114a <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	88 30       	cpi	r24, 0x08	; 8
    106c:	a8 f4       	brcc	.+42     	; 0x1098 <DIO_SetPinDirection+0x12e>
		{
			Clear_Bit(PORTA,PinNum);
    106e:	ab e3       	ldi	r26, 0x3B	; 59
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	eb e3       	ldi	r30, 0x3B	; 59
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_SetPinDirection+0x122>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_SetPinDirection+0x11e>
    1090:	80 95       	com	r24
    1092:	84 23       	and	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	59 c0       	rjmp	.+178    	; 0x114a <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	d8 f0       	brcs	.+54     	; 0x10d4 <DIO_SetPinDirection+0x16a>
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	80 31       	cpi	r24, 0x10	; 16
    10a2:	c0 f4       	brcc	.+48     	; 0x10d4 <DIO_SetPinDirection+0x16a>
		{
			Clear_Bit(DDRB,(PinNum-8));
    10a4:	a7 e3       	ldi	r26, 0x37	; 55
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e7 e3       	ldi	r30, 0x37	; 55
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9c 01       	movw	r18, r24
    10b8:	28 50       	subi	r18, 0x08	; 8
    10ba:	30 40       	sbci	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_SetPinDirection+0x15e>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_SetPinDirection+0x15a>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	3b c0       	rjmp	.+118    	; 0x114a <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	80 31       	cpi	r24, 0x10	; 16
    10d8:	d8 f0       	brcs	.+54     	; 0x1110 <DIO_SetPinDirection+0x1a6>
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	88 31       	cpi	r24, 0x18	; 24
    10de:	c0 f4       	brcc	.+48     	; 0x1110 <DIO_SetPinDirection+0x1a6>
		{
			Clear_Bit(DDRC,(PinNum-16));
    10e0:	a4 e3       	ldi	r26, 0x34	; 52
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e4 e3       	ldi	r30, 0x34	; 52
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9c 01       	movw	r18, r24
    10f4:	20 51       	subi	r18, 0x10	; 16
    10f6:	30 40       	sbci	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_SetPinDirection+0x19a>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_SetPinDirection+0x196>
    1108:	80 95       	com	r24
    110a:	84 23       	and	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	1d c0       	rjmp	.+58     	; 0x114a <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	88 31       	cpi	r24, 0x18	; 24
    1114:	d0 f0       	brcs	.+52     	; 0x114a <DIO_SetPinDirection+0x1e0>
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	80 32       	cpi	r24, 0x20	; 32
    111a:	b8 f4       	brcc	.+46     	; 0x114a <DIO_SetPinDirection+0x1e0>
		{
			Clear_Bit(DDRD,(PinNum-24));
    111c:	a1 e3       	ldi	r26, 0x31	; 49
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e1 e3       	ldi	r30, 0x31	; 49
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9c 01       	movw	r18, r24
    1130:	28 51       	subi	r18, 0x18	; 24
    1132:	30 40       	sbci	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_SetPinDirection+0x1d6>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_SetPinDirection+0x1d2>
    1144:	80 95       	com	r24
    1146:	84 23       	and	r24, r20
    1148:	8c 93       	st	X, r24
		}
	}
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <Keybad_Init>:
#include<util/delay.h>
#define F_CPU 8000000UL
#include"Keybad_CFG.h"

void Keybad_Init(void)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	//  DIO_SetPortDirection(Keybad_Port,255); //Setting keypad port as output port

	//Setting the rows as input pins
	DIO_SetPinDirection(PinC2,0);
    115c:	82 e1       	ldi	r24, 0x12	; 18
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_SetPinDirection>
	DIO_SetPinDirection(PinC3,0);
    1164:	83 e1       	ldi	r24, 0x13	; 19
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_SetPinDirection>
	DIO_SetPinDirection(PinC4,0);
    116c:	84 e1       	ldi	r24, 0x14	; 20
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_SetPinDirection>

	//Enabling the pull up resistors on input pins
	DIO_WritePin(PinC5,1);
    1174:	85 e1       	ldi	r24, 0x15	; 21
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(PinC6,1);
    117c:	86 e1       	ldi	r24, 0x16	; 22
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(PinC7,1);
    1184:	87 e1       	ldi	r24, 0x17	; 23
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <Keybad_CheckButton>:

uint8 Keybad_CheckButton(uint8 Key_Number)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	ad 97       	sbiw	r28, 0x2d	; 45
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	8b a3       	std	Y+35, r24	; 0x23
	uint8 result=0;
    11a8:	1c 8e       	std	Y+28, r1	; 0x1c

	uint8 row=Key_Number/3;
    11aa:	8b a1       	ldd	r24, Y+35	; 0x23
    11ac:	93 e0       	ldi	r25, 0x03	; 3
    11ae:	69 2f       	mov	r22, r25
    11b0:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodqi4>
    11b4:	8b 8f       	std	Y+27, r24	; 0x1b
	uint8 col=Key_Number%3;
    11b6:	8b a1       	ldd	r24, Y+35	; 0x23
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	69 2f       	mov	r22, r25
    11bc:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodqi4>
    11c0:	89 2f       	mov	r24, r25
    11c2:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8 Real_row[]={PinC2,PinC3,PinC4};
    11c4:	ce 01       	movw	r24, r28
    11c6:	4d 96       	adiw	r24, 0x1d	; 29
    11c8:	9d a3       	std	Y+37, r25	; 0x25
    11ca:	8c a3       	std	Y+36, r24	; 0x24
    11cc:	e3 ec       	ldi	r30, 0xC3	; 195
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	ff a3       	std	Y+39, r31	; 0x27
    11d2:	ee a3       	std	Y+38, r30	; 0x26
    11d4:	f3 e0       	ldi	r31, 0x03	; 3
    11d6:	f8 a7       	std	Y+40, r31	; 0x28
    11d8:	ee a1       	ldd	r30, Y+38	; 0x26
    11da:	ff a1       	ldd	r31, Y+39	; 0x27
    11dc:	00 80       	ld	r0, Z
    11de:	8e a1       	ldd	r24, Y+38	; 0x26
    11e0:	9f a1       	ldd	r25, Y+39	; 0x27
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	9f a3       	std	Y+39, r25	; 0x27
    11e6:	8e a3       	std	Y+38, r24	; 0x26
    11e8:	ec a1       	ldd	r30, Y+36	; 0x24
    11ea:	fd a1       	ldd	r31, Y+37	; 0x25
    11ec:	00 82       	st	Z, r0
    11ee:	8c a1       	ldd	r24, Y+36	; 0x24
    11f0:	9d a1       	ldd	r25, Y+37	; 0x25
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	9d a3       	std	Y+37, r25	; 0x25
    11f6:	8c a3       	std	Y+36, r24	; 0x24
    11f8:	98 a5       	ldd	r25, Y+40	; 0x28
    11fa:	91 50       	subi	r25, 0x01	; 1
    11fc:	98 a7       	std	Y+40, r25	; 0x28
    11fe:	e8 a5       	ldd	r30, Y+40	; 0x28
    1200:	ee 23       	and	r30, r30
    1202:	51 f7       	brne	.-44     	; 0x11d8 <Keybad_CheckButton+0x46>
	uint8 Real_col[]={PinC5,PinC6,PinC7};
    1204:	ce 01       	movw	r24, r28
    1206:	80 96       	adiw	r24, 0x20	; 32
    1208:	9a a7       	std	Y+42, r25	; 0x2a
    120a:	89 a7       	std	Y+41, r24	; 0x29
    120c:	e0 ec       	ldi	r30, 0xC0	; 192
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	fc a7       	std	Y+44, r31	; 0x2c
    1212:	eb a7       	std	Y+43, r30	; 0x2b
    1214:	f3 e0       	ldi	r31, 0x03	; 3
    1216:	fd a7       	std	Y+45, r31	; 0x2d
    1218:	eb a5       	ldd	r30, Y+43	; 0x2b
    121a:	fc a5       	ldd	r31, Y+44	; 0x2c
    121c:	00 80       	ld	r0, Z
    121e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1220:	9c a5       	ldd	r25, Y+44	; 0x2c
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	9c a7       	std	Y+44, r25	; 0x2c
    1226:	8b a7       	std	Y+43, r24	; 0x2b
    1228:	e9 a5       	ldd	r30, Y+41	; 0x29
    122a:	fa a5       	ldd	r31, Y+42	; 0x2a
    122c:	00 82       	st	Z, r0
    122e:	89 a5       	ldd	r24, Y+41	; 0x29
    1230:	9a a5       	ldd	r25, Y+42	; 0x2a
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	9a a7       	std	Y+42, r25	; 0x2a
    1236:	89 a7       	std	Y+41, r24	; 0x29
    1238:	9d a5       	ldd	r25, Y+45	; 0x2d
    123a:	91 50       	subi	r25, 0x01	; 1
    123c:	9d a7       	std	Y+45, r25	; 0x2d
    123e:	ed a5       	ldd	r30, Y+45	; 0x2d
    1240:	ee 23       	and	r30, r30
    1242:	51 f7       	brne	.-44     	; 0x1218 <Keybad_CheckButton+0x86>

	DIO_WritePin(PinC5,1);
    1244:	85 e1       	ldi	r24, 0x15	; 21
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(PinC6,1);
    124c:	86 e1       	ldi	r24, 0x16	; 22
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(PinC7,1);
    1254:	87 e1       	ldi	r24, 0x17	; 23
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(Real_col[col],0);
    125c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	ce 01       	movw	r24, r28
    1264:	80 96       	adiw	r24, 0x20	; 32
    1266:	fc 01       	movw	r30, r24
    1268:	e2 0f       	add	r30, r18
    126a:	f3 1f       	adc	r31, r19
    126c:	80 81       	ld	r24, Z
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>

	uint8 x=DIO_ReadPin(Real_row[row]);
    1274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	ce 01       	movw	r24, r28
    127c:	4d 96       	adiw	r24, 0x1d	; 29
    127e:	fc 01       	movw	r30, r24
    1280:	e2 0f       	add	r30, r18
    1282:	f3 1f       	adc	r31, r19
    1284:	80 81       	ld	r24, Z
    1286:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_ReadPin>
    128a:	89 8f       	std	Y+25, r24	; 0x19
	if(x==0)
    128c:	89 8d       	ldd	r24, Y+25	; 0x19
    128e:	88 23       	and	r24, r24
    1290:	09 f0       	breq	.+2      	; 0x1294 <Keybad_CheckButton+0x102>
    1292:	cf c0       	rjmp	.+414    	; 0x1432 <Keybad_CheckButton+0x2a0>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	aa ef       	ldi	r26, 0xFA	; 250
    129a:	b3 e4       	ldi	r27, 0x43	; 67
    129c:	8d 8b       	std	Y+21, r24	; 0x15
    129e:	9e 8b       	std	Y+22, r25	; 0x16
    12a0:	af 8b       	std	Y+23, r26	; 0x17
    12a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12a4:	6d 89       	ldd	r22, Y+21	; 0x15
    12a6:	7e 89       	ldd	r23, Y+22	; 0x16
    12a8:	8f 89       	ldd	r24, Y+23	; 0x17
    12aa:	98 8d       	ldd	r25, Y+24	; 0x18
    12ac:	2b ea       	ldi	r18, 0xAB	; 171
    12ae:	3a ea       	ldi	r19, 0xAA	; 170
    12b0:	4a e2       	ldi	r20, 0x2A	; 42
    12b2:	50 e4       	ldi	r21, 0x40	; 64
    12b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	89 8b       	std	Y+17, r24	; 0x11
    12be:	9a 8b       	std	Y+18, r25	; 0x12
    12c0:	ab 8b       	std	Y+19, r26	; 0x13
    12c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    12c4:	69 89       	ldd	r22, Y+17	; 0x11
    12c6:	7a 89       	ldd	r23, Y+18	; 0x12
    12c8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ca:	9c 89       	ldd	r25, Y+20	; 0x14
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	1c f4       	brge	.+6      	; 0x12e2 <Keybad_CheckButton+0x150>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	88 8b       	std	Y+16, r24	; 0x10
    12e0:	91 c0       	rjmp	.+290    	; 0x1404 <Keybad_CheckButton+0x272>
	else if (__tmp > 255)
    12e2:	69 89       	ldd	r22, Y+17	; 0x11
    12e4:	7a 89       	ldd	r23, Y+18	; 0x12
    12e6:	8b 89       	ldd	r24, Y+19	; 0x13
    12e8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	53 e4       	ldi	r21, 0x43	; 67
    12f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	0c f0       	brlt	.+2      	; 0x12fc <Keybad_CheckButton+0x16a>
    12fa:	7b c0       	rjmp	.+246    	; 0x13f2 <Keybad_CheckButton+0x260>
	{
		_delay_ms(__us / 1000.0);
    12fc:	6d 89       	ldd	r22, Y+21	; 0x15
    12fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1300:	8f 89       	ldd	r24, Y+23	; 0x17
    1302:	98 8d       	ldd	r25, Y+24	; 0x18
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	4a e7       	ldi	r20, 0x7A	; 122
    130a:	54 e4       	ldi	r21, 0x44	; 68
    130c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	8c 87       	std	Y+12, r24	; 0x0c
    1316:	9d 87       	std	Y+13, r25	; 0x0d
    1318:	ae 87       	std	Y+14, r26	; 0x0e
    131a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131c:	6c 85       	ldd	r22, Y+12	; 0x0c
    131e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1320:	8e 85       	ldd	r24, Y+14	; 0x0e
    1322:	9f 85       	ldd	r25, Y+15	; 0x0f
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	4a ef       	ldi	r20, 0xFA	; 250
    132a:	54 e4       	ldi	r21, 0x44	; 68
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	88 87       	std	Y+8, r24	; 0x08
    1336:	99 87       	std	Y+9, r25	; 0x09
    1338:	aa 87       	std	Y+10, r26	; 0x0a
    133a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    133c:	68 85       	ldd	r22, Y+8	; 0x08
    133e:	79 85       	ldd	r23, Y+9	; 0x09
    1340:	8a 85       	ldd	r24, Y+10	; 0x0a
    1342:	9b 85       	ldd	r25, Y+11	; 0x0b
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	5f e3       	ldi	r21, 0x3F	; 63
    134c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1350:	88 23       	and	r24, r24
    1352:	2c f4       	brge	.+10     	; 0x135e <Keybad_CheckButton+0x1cc>
		__ticks = 1;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9f 83       	std	Y+7, r25	; 0x07
    135a:	8e 83       	std	Y+6, r24	; 0x06
    135c:	3f c0       	rjmp	.+126    	; 0x13dc <Keybad_CheckButton+0x24a>
	else if (__tmp > 65535)
    135e:	68 85       	ldd	r22, Y+8	; 0x08
    1360:	79 85       	ldd	r23, Y+9	; 0x09
    1362:	8a 85       	ldd	r24, Y+10	; 0x0a
    1364:	9b 85       	ldd	r25, Y+11	; 0x0b
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	57 e4       	ldi	r21, 0x47	; 71
    136e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1372:	18 16       	cp	r1, r24
    1374:	4c f5       	brge	.+82     	; 0x13c8 <Keybad_CheckButton+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1376:	6c 85       	ldd	r22, Y+12	; 0x0c
    1378:	7d 85       	ldd	r23, Y+13	; 0x0d
    137a:	8e 85       	ldd	r24, Y+14	; 0x0e
    137c:	9f 85       	ldd	r25, Y+15	; 0x0f
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e2       	ldi	r20, 0x20	; 32
    1384:	51 e4       	ldi	r21, 0x41	; 65
    1386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9f 83       	std	Y+7, r25	; 0x07
    139c:	8e 83       	std	Y+6, r24	; 0x06
    139e:	0f c0       	rjmp	.+30     	; 0x13be <Keybad_CheckButton+0x22c>
    13a0:	88 ec       	ldi	r24, 0xC8	; 200
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9d 83       	std	Y+5, r25	; 0x05
    13a6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <Keybad_CheckButton+0x21a>
    13b0:	9d 83       	std	Y+5, r25	; 0x05
    13b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b4:	8e 81       	ldd	r24, Y+6	; 0x06
    13b6:	9f 81       	ldd	r25, Y+7	; 0x07
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	9f 83       	std	Y+7, r25	; 0x07
    13bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13be:	8e 81       	ldd	r24, Y+6	; 0x06
    13c0:	9f 81       	ldd	r25, Y+7	; 0x07
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <Keybad_CheckButton+0x20e>
    13c6:	24 c0       	rjmp	.+72     	; 0x1410 <Keybad_CheckButton+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c8:	68 85       	ldd	r22, Y+8	; 0x08
    13ca:	79 85       	ldd	r23, Y+9	; 0x09
    13cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9f 83       	std	Y+7, r25	; 0x07
    13da:	8e 83       	std	Y+6, r24	; 0x06
    13dc:	8e 81       	ldd	r24, Y+6	; 0x06
    13de:	9f 81       	ldd	r25, Y+7	; 0x07
    13e0:	9b 83       	std	Y+3, r25	; 0x03
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <Keybad_CheckButton+0x256>
    13ec:	9b 83       	std	Y+3, r25	; 0x03
    13ee:	8a 83       	std	Y+2, r24	; 0x02
    13f0:	0f c0       	rjmp	.+30     	; 0x1410 <Keybad_CheckButton+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13f2:	69 89       	ldd	r22, Y+17	; 0x11
    13f4:	7a 89       	ldd	r23, Y+18	; 0x12
    13f6:	8b 89       	ldd	r24, Y+19	; 0x13
    13f8:	9c 89       	ldd	r25, Y+20	; 0x14
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	88 8b       	std	Y+16, r24	; 0x10
    1404:	88 89       	ldd	r24, Y+16	; 0x10
    1406:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	8a 95       	dec	r24
    140c:	f1 f7       	brne	.-4      	; 0x140a <Keybad_CheckButton+0x278>
    140e:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_us(500);
		x=DIO_ReadPin(Real_row[row]);
    1410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	ce 01       	movw	r24, r28
    1418:	4d 96       	adiw	r24, 0x1d	; 29
    141a:	fc 01       	movw	r30, r24
    141c:	e2 0f       	add	r30, r18
    141e:	f3 1f       	adc	r31, r19
    1420:	80 81       	ld	r24, Z
    1422:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_ReadPin>
    1426:	89 8f       	std	Y+25, r24	; 0x19
		if(x==0)
    1428:	89 8d       	ldd	r24, Y+25	; 0x19
    142a:	88 23       	and	r24, r24
    142c:	11 f4       	brne	.+4      	; 0x1432 <Keybad_CheckButton+0x2a0>
		{
			result=1;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	8c 8f       	std	Y+28, r24	; 0x1c
		}
	}
	return result;
    1432:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    1434:	ad 96       	adiw	r28, 0x2d	; 45
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <LCD_INIT>:




void LCD_INIT(void)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_4_BIT_2_LINES_COMMAND);
	LCD_sendCommand(CURSOR_OFF);
	LCD_Clear();

#elif defined HIGHER_BITS
	DATA_DDR = 0xF0;
    144e:	ea e3       	ldi	r30, 0x3A	; 58
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 ef       	ldi	r24, 0xF0	; 240
    1454:	80 83       	st	Z, r24
	Set_Bit(CONTROL_DDR,RS);
    1456:	aa e3       	ldi	r26, 0x3A	; 58
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ea e3       	ldi	r30, 0x3A	; 58
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	8c 93       	st	X, r24
	Set_Bit(CONTROL_DDR,RW);
    1464:	aa e3       	ldi	r26, 0x3A	; 58
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ea e3       	ldi	r30, 0x3A	; 58
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	84 60       	ori	r24, 0x04	; 4
    1470:	8c 93       	st	X, r24
	Set_Bit(CONTROL_DDR,E);
    1472:	aa e3       	ldi	r26, 0x3A	; 58
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ea e3       	ldi	r30, 0x3A	; 58
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 60       	ori	r24, 0x08	; 8
    147e:	8c 93       	st	X, r24
	LCD_sendCommand(LCD_4_BIT_MODE);
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_sendCommand>
	LCD_sendCommand(LCD_4_BIT_2_LINES_COMMAND);
    1486:	88 e2       	ldi	r24, 0x28	; 40
    1488:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF);
    148c:	8c e0       	ldi	r24, 0x0C	; 12
    148e:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_sendCommand>
	LCD_Clear();
    1492:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_Clear>

#endif

#endif
}
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <LCD_sendCommand>:


void LCD_sendCommand(const uint8 Command)
{
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	c1 59       	subi	r28, 0x91	; 145
    14aa:	d0 40       	sbci	r29, 0x00	; 0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	fe 01       	movw	r30, r28
    14b8:	ef 56       	subi	r30, 0x6F	; 111
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	80 83       	st	Z, r24
	Clear_Bit(CONTROL_PORT,E);
	_delay_us(500);


#elif defined FOUR_BIT_MODE
	Clear_Bit(CONTROL_PORT,RS);
    14be:	ab e3       	ldi	r26, 0x3B	; 59
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	eb e3       	ldi	r30, 0x3B	; 59
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8d 7f       	andi	r24, 0xFD	; 253
    14ca:	8c 93       	st	X, r24
	Clear_Bit(CONTROL_PORT,RW);
    14cc:	ab e3       	ldi	r26, 0x3B	; 59
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	eb e3       	ldi	r30, 0x3B	; 59
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	8b 7f       	andi	r24, 0xFB	; 251
    14d8:	8c 93       	st	X, r24
    14da:	fe 01       	movw	r30, r28
    14dc:	e3 57       	subi	r30, 0x73	; 115
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	aa ef       	ldi	r26, 0xFA	; 250
    14e6:	b3 e4       	ldi	r27, 0x43	; 67
    14e8:	80 83       	st	Z, r24
    14ea:	91 83       	std	Z+1, r25	; 0x01
    14ec:	a2 83       	std	Z+2, r26	; 0x02
    14ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14f0:	8e 01       	movw	r16, r28
    14f2:	07 57       	subi	r16, 0x77	; 119
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	fe 01       	movw	r30, r28
    14f8:	e3 57       	subi	r30, 0x73	; 115
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	60 81       	ld	r22, Z
    14fe:	71 81       	ldd	r23, Z+1	; 0x01
    1500:	82 81       	ldd	r24, Z+2	; 0x02
    1502:	93 81       	ldd	r25, Z+3	; 0x03
    1504:	2b ea       	ldi	r18, 0xAB	; 171
    1506:	3a ea       	ldi	r19, 0xAA	; 170
    1508:	4a e2       	ldi	r20, 0x2A	; 42
    150a:	50 e4       	ldi	r21, 0x40	; 64
    150c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	f8 01       	movw	r30, r16
    1516:	80 83       	st	Z, r24
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	a2 83       	std	Z+2, r26	; 0x02
    151c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    151e:	fe 01       	movw	r30, r28
    1520:	e7 57       	subi	r30, 0x77	; 119
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	60 81       	ld	r22, Z
    1526:	71 81       	ldd	r23, Z+1	; 0x01
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	34 f4       	brge	.+12     	; 0x1548 <LCD_sendCommand+0xac>
		__ticks = 1;
    153c:	fe 01       	movw	r30, r28
    153e:	e8 57       	subi	r30, 0x78	; 120
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 83       	st	Z, r24
    1546:	e0 c0       	rjmp	.+448    	; 0x1708 <LCD_sendCommand+0x26c>
	else if (__tmp > 255)
    1548:	fe 01       	movw	r30, r28
    154a:	e7 57       	subi	r30, 0x77	; 119
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	53 e4       	ldi	r21, 0x43	; 67
    155e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	0c f0       	brlt	.+2      	; 0x1568 <LCD_sendCommand+0xcc>
    1566:	c0 c0       	rjmp	.+384    	; 0x16e8 <LCD_sendCommand+0x24c>
	{
		_delay_ms(__us / 1000.0);
    1568:	fe 01       	movw	r30, r28
    156a:	e3 57       	subi	r30, 0x73	; 115
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a e7       	ldi	r20, 0x7A	; 122
    157c:	54 e4       	ldi	r21, 0x44	; 68
    157e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	fe 01       	movw	r30, r28
    1588:	ec 57       	subi	r30, 0x7C	; 124
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	80 83       	st	Z, r24
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	a2 83       	std	Z+2, r26	; 0x02
    1592:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1594:	8e 01       	movw	r16, r28
    1596:	00 58       	subi	r16, 0x80	; 128
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
    159a:	fe 01       	movw	r30, r28
    159c:	ec 57       	subi	r30, 0x7C	; 124
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4a ef       	ldi	r20, 0xFA	; 250
    15ae:	54 e4       	ldi	r21, 0x44	; 68
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	f8 01       	movw	r30, r16
    15ba:	80 83       	st	Z, r24
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	a2 83       	std	Z+2, r26	; 0x02
    15c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15c2:	fe 01       	movw	r30, r28
    15c4:	e0 58       	subi	r30, 0x80	; 128
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	60 81       	ld	r22, Z
    15ca:	71 81       	ldd	r23, Z+1	; 0x01
    15cc:	82 81       	ldd	r24, Z+2	; 0x02
    15ce:	93 81       	ldd	r25, Z+3	; 0x03
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e8       	ldi	r20, 0x80	; 128
    15d6:	5f e3       	ldi	r21, 0x3F	; 63
    15d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15dc:	88 23       	and	r24, r24
    15de:	44 f4       	brge	.+16     	; 0x15f0 <LCD_sendCommand+0x154>
		__ticks = 1;
    15e0:	fe 01       	movw	r30, r28
    15e2:	e2 58       	subi	r30, 0x82	; 130
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
    15ee:	64 c0       	rjmp	.+200    	; 0x16b8 <LCD_sendCommand+0x21c>
	else if (__tmp > 65535)
    15f0:	fe 01       	movw	r30, r28
    15f2:	e0 58       	subi	r30, 0x80	; 128
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	3f ef       	ldi	r19, 0xFF	; 255
    1602:	4f e7       	ldi	r20, 0x7F	; 127
    1604:	57 e4       	ldi	r21, 0x47	; 71
    1606:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    160a:	18 16       	cp	r1, r24
    160c:	0c f0       	brlt	.+2      	; 0x1610 <LCD_sendCommand+0x174>
    160e:	43 c0       	rjmp	.+134    	; 0x1696 <LCD_sendCommand+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1610:	fe 01       	movw	r30, r28
    1612:	ec 57       	subi	r30, 0x7C	; 124
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	60 81       	ld	r22, Z
    1618:	71 81       	ldd	r23, Z+1	; 0x01
    161a:	82 81       	ldd	r24, Z+2	; 0x02
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e2       	ldi	r20, 0x20	; 32
    1624:	51 e4       	ldi	r21, 0x41	; 65
    1626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	8e 01       	movw	r16, r28
    1630:	02 58       	subi	r16, 0x82	; 130
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	f8 01       	movw	r30, r16
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
    1646:	1f c0       	rjmp	.+62     	; 0x1686 <LCD_sendCommand+0x1ea>
    1648:	fe 01       	movw	r30, r28
    164a:	e4 58       	subi	r30, 0x84	; 132
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	88 ec       	ldi	r24, 0xC8	; 200
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1656:	fe 01       	movw	r30, r28
    1658:	e4 58       	subi	r30, 0x84	; 132
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <LCD_sendCommand+0x1c4>
    1664:	fe 01       	movw	r30, r28
    1666:	e4 58       	subi	r30, 0x84	; 132
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	91 83       	std	Z+1, r25	; 0x01
    166c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166e:	de 01       	movw	r26, r28
    1670:	a2 58       	subi	r26, 0x82	; 130
    1672:	bf 4f       	sbci	r27, 0xFF	; 255
    1674:	fe 01       	movw	r30, r28
    1676:	e2 58       	subi	r30, 0x82	; 130
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	11 96       	adiw	r26, 0x01	; 1
    1682:	9c 93       	st	X, r25
    1684:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1686:	fe 01       	movw	r30, r28
    1688:	e2 58       	subi	r30, 0x82	; 130
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	80 81       	ld	r24, Z
    168e:	91 81       	ldd	r25, Z+1	; 0x01
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	d1 f6       	brne	.-76     	; 0x1648 <LCD_sendCommand+0x1ac>
    1694:	4b c0       	rjmp	.+150    	; 0x172c <LCD_sendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1696:	8e 01       	movw	r16, r28
    1698:	02 58       	subi	r16, 0x82	; 130
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	fe 01       	movw	r30, r28
    169e:	e0 58       	subi	r30, 0x80	; 128
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	f8 01       	movw	r30, r16
    16b4:	91 83       	std	Z+1, r25	; 0x01
    16b6:	80 83       	st	Z, r24
    16b8:	de 01       	movw	r26, r28
    16ba:	a6 58       	subi	r26, 0x86	; 134
    16bc:	bf 4f       	sbci	r27, 0xFF	; 255
    16be:	fe 01       	movw	r30, r28
    16c0:	e2 58       	subi	r30, 0x82	; 130
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	11 96       	adiw	r26, 0x01	; 1
    16ca:	9c 93       	st	X, r25
    16cc:	8e 93       	st	-X, r24
    16ce:	fe 01       	movw	r30, r28
    16d0:	e6 58       	subi	r30, 0x86	; 134
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_sendCommand+0x23c>
    16dc:	fe 01       	movw	r30, r28
    16de:	e6 58       	subi	r30, 0x86	; 134
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
    16e6:	22 c0       	rjmp	.+68     	; 0x172c <LCD_sendCommand+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16e8:	8e 01       	movw	r16, r28
    16ea:	08 57       	subi	r16, 0x78	; 120
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	fe 01       	movw	r30, r28
    16f0:	e7 57       	subi	r30, 0x77	; 119
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	82 81       	ldd	r24, Z+2	; 0x02
    16fa:	93 81       	ldd	r25, Z+3	; 0x03
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	f8 01       	movw	r30, r16
    1706:	80 83       	st	Z, r24
    1708:	de 01       	movw	r26, r28
    170a:	a7 58       	subi	r26, 0x87	; 135
    170c:	bf 4f       	sbci	r27, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	e8 57       	subi	r30, 0x78	; 120
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1718:	fe 01       	movw	r30, r28
    171a:	e7 58       	subi	r30, 0x87	; 135
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	80 81       	ld	r24, Z
    1720:	8a 95       	dec	r24
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_sendCommand+0x284>
    1724:	fe 01       	movw	r30, r28
    1726:	e7 58       	subi	r30, 0x87	; 135
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	80 83       	st	Z, r24
	_delay_us(500);
	Set_Bit(CONTROL_PORT,E);
    172c:	ab e3       	ldi	r26, 0x3B	; 59
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	eb e3       	ldi	r30, 0x3B	; 59
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	88 60       	ori	r24, 0x08	; 8
    1738:	8c 93       	st	X, r24
    173a:	fe 01       	movw	r30, r28
    173c:	eb 58       	subi	r30, 0x8B	; 139
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	aa ef       	ldi	r26, 0xFA	; 250
    1746:	b3 e4       	ldi	r27, 0x43	; 67
    1748:	80 83       	st	Z, r24
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	a2 83       	std	Z+2, r26	; 0x02
    174e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1750:	8e 01       	movw	r16, r28
    1752:	0f 58       	subi	r16, 0x8F	; 143
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	fe 01       	movw	r30, r28
    1758:	eb 58       	subi	r30, 0x8B	; 139
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	2b ea       	ldi	r18, 0xAB	; 171
    1766:	3a ea       	ldi	r19, 0xAA	; 170
    1768:	4a e2       	ldi	r20, 0x2A	; 42
    176a:	50 e4       	ldi	r21, 0x40	; 64
    176c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	f8 01       	movw	r30, r16
    1776:	80 83       	st	Z, r24
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	a2 83       	std	Z+2, r26	; 0x02
    177c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    177e:	fe 01       	movw	r30, r28
    1780:	ef 58       	subi	r30, 0x8F	; 143
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	34 f4       	brge	.+12     	; 0x17a8 <LCD_sendCommand+0x30c>
		__ticks = 1;
    179c:	fe 01       	movw	r30, r28
    179e:	e0 59       	subi	r30, 0x90	; 144
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	80 83       	st	Z, r24
    17a6:	e0 c0       	rjmp	.+448    	; 0x1968 <LCD_sendCommand+0x4cc>
	else if (__tmp > 255)
    17a8:	fe 01       	movw	r30, r28
    17aa:	ef 58       	subi	r30, 0x8F	; 143
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	53 e4       	ldi	r21, 0x43	; 67
    17be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	0c f0       	brlt	.+2      	; 0x17c8 <LCD_sendCommand+0x32c>
    17c6:	c0 c0       	rjmp	.+384    	; 0x1948 <LCD_sendCommand+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    17c8:	fe 01       	movw	r30, r28
    17ca:	eb 58       	subi	r30, 0x8B	; 139
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	4a e7       	ldi	r20, 0x7A	; 122
    17dc:	54 e4       	ldi	r21, 0x44	; 68
    17de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	fe 01       	movw	r30, r28
    17e8:	e4 59       	subi	r30, 0x94	; 148
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	80 83       	st	Z, r24
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	a2 83       	std	Z+2, r26	; 0x02
    17f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f4:	8e 01       	movw	r16, r28
    17f6:	08 59       	subi	r16, 0x98	; 152
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	fe 01       	movw	r30, r28
    17fc:	e4 59       	subi	r30, 0x94	; 148
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	4a ef       	ldi	r20, 0xFA	; 250
    180e:	54 e4       	ldi	r21, 0x44	; 68
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	f8 01       	movw	r30, r16
    181a:	80 83       	st	Z, r24
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	a2 83       	std	Z+2, r26	; 0x02
    1820:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1822:	fe 01       	movw	r30, r28
    1824:	e8 59       	subi	r30, 0x98	; 152
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	44 f4       	brge	.+16     	; 0x1850 <LCD_sendCommand+0x3b4>
		__ticks = 1;
    1840:	fe 01       	movw	r30, r28
    1842:	ea 59       	subi	r30, 0x9A	; 154
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	80 83       	st	Z, r24
    184e:	64 c0       	rjmp	.+200    	; 0x1918 <LCD_sendCommand+0x47c>
	else if (__tmp > 65535)
    1850:	fe 01       	movw	r30, r28
    1852:	e8 59       	subi	r30, 0x98	; 152
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	4f e7       	ldi	r20, 0x7F	; 127
    1864:	57 e4       	ldi	r21, 0x47	; 71
    1866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    186a:	18 16       	cp	r1, r24
    186c:	0c f0       	brlt	.+2      	; 0x1870 <LCD_sendCommand+0x3d4>
    186e:	43 c0       	rjmp	.+134    	; 0x18f6 <LCD_sendCommand+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1870:	fe 01       	movw	r30, r28
    1872:	e4 59       	subi	r30, 0x94	; 148
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e2       	ldi	r20, 0x20	; 32
    1884:	51 e4       	ldi	r21, 0x41	; 65
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	8e 01       	movw	r16, r28
    1890:	0a 59       	subi	r16, 0x9A	; 154
    1892:	1f 4f       	sbci	r17, 0xFF	; 255
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	f8 01       	movw	r30, r16
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	1f c0       	rjmp	.+62     	; 0x18e6 <LCD_sendCommand+0x44a>
    18a8:	fe 01       	movw	r30, r28
    18aa:	ec 59       	subi	r30, 0x9C	; 156
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	88 ec       	ldi	r24, 0xC8	; 200
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b6:	fe 01       	movw	r30, r28
    18b8:	ec 59       	subi	r30, 0x9C	; 156
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	91 81       	ldd	r25, Z+1	; 0x01
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <LCD_sendCommand+0x424>
    18c4:	fe 01       	movw	r30, r28
    18c6:	ec 59       	subi	r30, 0x9C	; 156
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ce:	de 01       	movw	r26, r28
    18d0:	aa 59       	subi	r26, 0x9A	; 154
    18d2:	bf 4f       	sbci	r27, 0xFF	; 255
    18d4:	fe 01       	movw	r30, r28
    18d6:	ea 59       	subi	r30, 0x9A	; 154
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	11 96       	adiw	r26, 0x01	; 1
    18e2:	9c 93       	st	X, r25
    18e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e6:	fe 01       	movw	r30, r28
    18e8:	ea 59       	subi	r30, 0x9A	; 154
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	d1 f6       	brne	.-76     	; 0x18a8 <LCD_sendCommand+0x40c>
    18f4:	4b c0       	rjmp	.+150    	; 0x198c <LCD_sendCommand+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f6:	8e 01       	movw	r16, r28
    18f8:	0a 59       	subi	r16, 0x9A	; 154
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	fe 01       	movw	r30, r28
    18fe:	e8 59       	subi	r30, 0x98	; 152
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	f8 01       	movw	r30, r16
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	80 83       	st	Z, r24
    1918:	de 01       	movw	r26, r28
    191a:	ae 59       	subi	r26, 0x9E	; 158
    191c:	bf 4f       	sbci	r27, 0xFF	; 255
    191e:	fe 01       	movw	r30, r28
    1920:	ea 59       	subi	r30, 0x9A	; 154
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 81       	ld	r24, Z
    1926:	91 81       	ldd	r25, Z+1	; 0x01
    1928:	11 96       	adiw	r26, 0x01	; 1
    192a:	9c 93       	st	X, r25
    192c:	8e 93       	st	-X, r24
    192e:	fe 01       	movw	r30, r28
    1930:	ee 59       	subi	r30, 0x9E	; 158
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 81       	ld	r24, Z
    1936:	91 81       	ldd	r25, Z+1	; 0x01
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_sendCommand+0x49c>
    193c:	fe 01       	movw	r30, r28
    193e:	ee 59       	subi	r30, 0x9E	; 158
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
    1946:	22 c0       	rjmp	.+68     	; 0x198c <LCD_sendCommand+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1948:	8e 01       	movw	r16, r28
    194a:	00 59       	subi	r16, 0x90	; 144
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	fe 01       	movw	r30, r28
    1950:	ef 58       	subi	r30, 0x8F	; 143
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	f8 01       	movw	r30, r16
    1966:	80 83       	st	Z, r24
    1968:	de 01       	movw	r26, r28
    196a:	af 59       	subi	r26, 0x9F	; 159
    196c:	bf 4f       	sbci	r27, 0xFF	; 255
    196e:	fe 01       	movw	r30, r28
    1970:	e0 59       	subi	r30, 0x90	; 144
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1978:	fe 01       	movw	r30, r28
    197a:	ef 59       	subi	r30, 0x9F	; 159
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	8a 95       	dec	r24
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_sendCommand+0x4e4>
    1984:	fe 01       	movw	r30, r28
    1986:	ef 59       	subi	r30, 0x9F	; 159
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 83       	st	Z, r24
	_delay_us(500);
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | ((0xF0 & Command)>>4);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | (0xF0 & Command);
    198c:	ab e3       	ldi	r26, 0x3B	; 59
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	eb e3       	ldi	r30, 0x3B	; 59
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	98 2f       	mov	r25, r24
    1998:	9f 70       	andi	r25, 0x0F	; 15
    199a:	fe 01       	movw	r30, r28
    199c:	ef 56       	subi	r30, 0x6F	; 111
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	80 7f       	andi	r24, 0xF0	; 240
    19a4:	89 2b       	or	r24, r25
    19a6:	8c 93       	st	X, r24
    19a8:	fe 01       	movw	r30, r28
    19aa:	e3 5a       	subi	r30, 0xA3	; 163
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	aa ef       	ldi	r26, 0xFA	; 250
    19b4:	b3 e4       	ldi	r27, 0x43	; 67
    19b6:	80 83       	st	Z, r24
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	a2 83       	std	Z+2, r26	; 0x02
    19bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19be:	8e 01       	movw	r16, r28
    19c0:	07 5a       	subi	r16, 0xA7	; 167
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	fe 01       	movw	r30, r28
    19c6:	e3 5a       	subi	r30, 0xA3	; 163
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	2b ea       	ldi	r18, 0xAB	; 171
    19d4:	3a ea       	ldi	r19, 0xAA	; 170
    19d6:	4a e2       	ldi	r20, 0x2A	; 42
    19d8:	50 e4       	ldi	r21, 0x40	; 64
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	f8 01       	movw	r30, r16
    19e4:	80 83       	st	Z, r24
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	a2 83       	std	Z+2, r26	; 0x02
    19ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ec:	fe 01       	movw	r30, r28
    19ee:	e7 5a       	subi	r30, 0xA7	; 167
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	34 f4       	brge	.+12     	; 0x1a16 <LCD_sendCommand+0x57a>
		__ticks = 1;
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e8 5a       	subi	r30, 0xA8	; 168
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	80 83       	st	Z, r24
    1a14:	e0 c0       	rjmp	.+448    	; 0x1bd6 <LCD_sendCommand+0x73a>
	else if (__tmp > 255)
    1a16:	fe 01       	movw	r30, r28
    1a18:	e7 5a       	subi	r30, 0xA7	; 167
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4f e7       	ldi	r20, 0x7F	; 127
    1a2a:	53 e4       	ldi	r21, 0x43	; 67
    1a2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a30:	18 16       	cp	r1, r24
    1a32:	0c f0       	brlt	.+2      	; 0x1a36 <LCD_sendCommand+0x59a>
    1a34:	c0 c0       	rjmp	.+384    	; 0x1bb6 <LCD_sendCommand+0x71a>
	{
		_delay_ms(__us / 1000.0);
    1a36:	fe 01       	movw	r30, r28
    1a38:	e3 5a       	subi	r30, 0xA3	; 163
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a e7       	ldi	r20, 0x7A	; 122
    1a4a:	54 e4       	ldi	r21, 0x44	; 68
    1a4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	fe 01       	movw	r30, r28
    1a56:	ec 5a       	subi	r30, 0xAC	; 172
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 83       	st	Z, r24
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	a2 83       	std	Z+2, r26	; 0x02
    1a60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	8e 01       	movw	r16, r28
    1a64:	00 5b       	subi	r16, 0xB0	; 176
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ec 5a       	subi	r30, 0xAC	; 172
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a ef       	ldi	r20, 0xFA	; 250
    1a7c:	54 e4       	ldi	r21, 0x44	; 68
    1a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	f8 01       	movw	r30, r16
    1a88:	80 83       	st	Z, r24
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	a2 83       	std	Z+2, r26	; 0x02
    1a8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a90:	fe 01       	movw	r30, r28
    1a92:	e0 5b       	subi	r30, 0xB0	; 176
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	44 f4       	brge	.+16     	; 0x1abe <LCD_sendCommand+0x622>
		__ticks = 1;
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e2 5b       	subi	r30, 0xB2	; 178
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	80 83       	st	Z, r24
    1abc:	64 c0       	rjmp	.+200    	; 0x1b86 <LCD_sendCommand+0x6ea>
	else if (__tmp > 65535)
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e0 5b       	subi	r30, 0xB0	; 176
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <LCD_sendCommand+0x642>
    1adc:	43 c0       	rjmp	.+134    	; 0x1b64 <LCD_sendCommand+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ade:	fe 01       	movw	r30, r28
    1ae0:	ec 5a       	subi	r30, 0xAC	; 172
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e2       	ldi	r20, 0x20	; 32
    1af2:	51 e4       	ldi	r21, 0x41	; 65
    1af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	8e 01       	movw	r16, r28
    1afe:	02 5b       	subi	r16, 0xB2	; 178
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	f8 01       	movw	r30, r16
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
    1b14:	1f c0       	rjmp	.+62     	; 0x1b54 <LCD_sendCommand+0x6b8>
    1b16:	fe 01       	movw	r30, r28
    1b18:	e4 5b       	subi	r30, 0xB4	; 180
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	88 ec       	ldi	r24, 0xC8	; 200
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b24:	fe 01       	movw	r30, r28
    1b26:	e4 5b       	subi	r30, 0xB4	; 180
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	91 81       	ldd	r25, Z+1	; 0x01
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_sendCommand+0x692>
    1b32:	fe 01       	movw	r30, r28
    1b34:	e4 5b       	subi	r30, 0xB4	; 180
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	de 01       	movw	r26, r28
    1b3e:	a2 5b       	subi	r26, 0xB2	; 178
    1b40:	bf 4f       	sbci	r27, 0xFF	; 255
    1b42:	fe 01       	movw	r30, r28
    1b44:	e2 5b       	subi	r30, 0xB2	; 178
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	11 96       	adiw	r26, 0x01	; 1
    1b50:	9c 93       	st	X, r25
    1b52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	fe 01       	movw	r30, r28
    1b56:	e2 5b       	subi	r30, 0xB2	; 178
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	d1 f6       	brne	.-76     	; 0x1b16 <LCD_sendCommand+0x67a>
    1b62:	4b c0       	rjmp	.+150    	; 0x1bfa <LCD_sendCommand+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	8e 01       	movw	r16, r28
    1b66:	02 5b       	subi	r16, 0xB2	; 178
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e0 5b       	subi	r30, 0xB0	; 176
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	f8 01       	movw	r30, r16
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
    1b86:	de 01       	movw	r26, r28
    1b88:	a6 5b       	subi	r26, 0xB6	; 182
    1b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e2 5b       	subi	r30, 0xB2	; 178
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	11 96       	adiw	r26, 0x01	; 1
    1b98:	9c 93       	st	X, r25
    1b9a:	8e 93       	st	-X, r24
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e6 5b       	subi	r30, 0xB6	; 182
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_sendCommand+0x70a>
    1baa:	fe 01       	movw	r30, r28
    1bac:	e6 5b       	subi	r30, 0xB6	; 182
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
    1bb4:	22 c0       	rjmp	.+68     	; 0x1bfa <LCD_sendCommand+0x75e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	08 5a       	subi	r16, 0xA8	; 168
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e7 5a       	subi	r30, 0xA7	; 167
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	80 83       	st	Z, r24
    1bd6:	de 01       	movw	r26, r28
    1bd8:	a7 5b       	subi	r26, 0xB7	; 183
    1bda:	bf 4f       	sbci	r27, 0xFF	; 255
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e8 5a       	subi	r30, 0xA8	; 168
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 81       	ld	r24, Z
    1be4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1be6:	fe 01       	movw	r30, r28
    1be8:	e7 5b       	subi	r30, 0xB7	; 183
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	8a 95       	dec	r24
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_sendCommand+0x752>
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e7 5b       	subi	r30, 0xB7	; 183
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 83       	st	Z, r24
#endif
	_delay_us(500);
	Clear_Bit(CONTROL_PORT,E);
    1bfa:	ab e3       	ldi	r26, 0x3B	; 59
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e3       	ldi	r30, 0x3B	; 59
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	87 7f       	andi	r24, 0xF7	; 247
    1c06:	8c 93       	st	X, r24
    1c08:	fe 01       	movw	r30, r28
    1c0a:	eb 5b       	subi	r30, 0xBB	; 187
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	aa ef       	ldi	r26, 0xFA	; 250
    1c14:	b3 e4       	ldi	r27, 0x43	; 67
    1c16:	80 83       	st	Z, r24
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	a2 83       	std	Z+2, r26	; 0x02
    1c1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c1e:	8e 01       	movw	r16, r28
    1c20:	0f 5b       	subi	r16, 0xBF	; 191
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	fe 01       	movw	r30, r28
    1c26:	eb 5b       	subi	r30, 0xBB	; 187
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	2b ea       	ldi	r18, 0xAB	; 171
    1c34:	3a ea       	ldi	r19, 0xAA	; 170
    1c36:	4a e2       	ldi	r20, 0x2A	; 42
    1c38:	50 e4       	ldi	r21, 0x40	; 64
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ef 5b       	subi	r30, 0xBF	; 191
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	34 f4       	brge	.+12     	; 0x1c76 <LCD_sendCommand+0x7da>
		__ticks = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e0 5c       	subi	r30, 0xC0	; 192
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 83       	st	Z, r24
    1c74:	9d c0       	rjmp	.+314    	; 0x1db0 <LCD_sendCommand+0x914>
	else if (__tmp > 255)
    1c76:	fe 01       	movw	r30, r28
    1c78:	ef 5b       	subi	r30, 0xBF	; 191
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	60 81       	ld	r22, Z
    1c7e:	71 81       	ldd	r23, Z+1	; 0x01
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	93 81       	ldd	r25, Z+3	; 0x03
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	53 e4       	ldi	r21, 0x43	; 67
    1c8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	0c f0       	brlt	.+2      	; 0x1c96 <LCD_sendCommand+0x7fa>
    1c94:	7e c0       	rjmp	.+252    	; 0x1d92 <LCD_sendCommand+0x8f6>
	{
		_delay_ms(__us / 1000.0);
    1c96:	fe 01       	movw	r30, r28
    1c98:	eb 5b       	subi	r30, 0xBB	; 187
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a e7       	ldi	r20, 0x7A	; 122
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8c af       	std	Y+60, r24	; 0x3c
    1cb6:	9d af       	std	Y+61, r25	; 0x3d
    1cb8:	ae af       	std	Y+62, r26	; 0x3e
    1cba:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1cbe:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cc0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a ef       	ldi	r20, 0xFA	; 250
    1cca:	54 e4       	ldi	r21, 0x44	; 68
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	88 af       	std	Y+56, r24	; 0x38
    1cd6:	99 af       	std	Y+57, r25	; 0x39
    1cd8:	aa af       	std	Y+58, r26	; 0x3a
    1cda:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1cdc:	68 ad       	ldd	r22, Y+56	; 0x38
    1cde:	79 ad       	ldd	r23, Y+57	; 0x39
    1ce0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ce2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <LCD_sendCommand+0x862>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9f ab       	std	Y+55, r25	; 0x37
    1cfa:	8e ab       	std	Y+54, r24	; 0x36
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <LCD_sendCommand+0x8e0>
	else if (__tmp > 65535)
    1cfe:	68 ad       	ldd	r22, Y+56	; 0x38
    1d00:	79 ad       	ldd	r23, Y+57	; 0x39
    1d02:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d04:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <LCD_sendCommand+0x8cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d18:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9f ab       	std	Y+55, r25	; 0x37
    1d3c:	8e ab       	std	Y+54, r24	; 0x36
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <LCD_sendCommand+0x8c2>
    1d40:	88 ec       	ldi	r24, 0xC8	; 200
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9d ab       	std	Y+53, r25	; 0x35
    1d46:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d48:	8c a9       	ldd	r24, Y+52	; 0x34
    1d4a:	9d a9       	ldd	r25, Y+53	; 0x35
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_sendCommand+0x8b0>
    1d50:	9d ab       	std	Y+53, r25	; 0x35
    1d52:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8e a9       	ldd	r24, Y+54	; 0x36
    1d56:	9f a9       	ldd	r25, Y+55	; 0x37
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9f ab       	std	Y+55, r25	; 0x37
    1d5c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8e a9       	ldd	r24, Y+54	; 0x36
    1d60:	9f a9       	ldd	r25, Y+55	; 0x37
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <LCD_sendCommand+0x8a4>
    1d66:	2d c0       	rjmp	.+90     	; 0x1dc2 <LCD_sendCommand+0x926>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	68 ad       	ldd	r22, Y+56	; 0x38
    1d6a:	79 ad       	ldd	r23, Y+57	; 0x39
    1d6c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d6e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9f ab       	std	Y+55, r25	; 0x37
    1d7a:	8e ab       	std	Y+54, r24	; 0x36
    1d7c:	8e a9       	ldd	r24, Y+54	; 0x36
    1d7e:	9f a9       	ldd	r25, Y+55	; 0x37
    1d80:	9b ab       	std	Y+51, r25	; 0x33
    1d82:	8a ab       	std	Y+50, r24	; 0x32
    1d84:	8a a9       	ldd	r24, Y+50	; 0x32
    1d86:	9b a9       	ldd	r25, Y+51	; 0x33
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_sendCommand+0x8ec>
    1d8c:	9b ab       	std	Y+51, r25	; 0x33
    1d8e:	8a ab       	std	Y+50, r24	; 0x32
    1d90:	18 c0       	rjmp	.+48     	; 0x1dc2 <LCD_sendCommand+0x926>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d92:	fe 01       	movw	r30, r28
    1d94:	ef 5b       	subi	r30, 0xBF	; 191
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	fe 01       	movw	r30, r28
    1daa:	e0 5c       	subi	r30, 0xC0	; 192
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 83       	st	Z, r24
    1db0:	fe 01       	movw	r30, r28
    1db2:	e0 5c       	subi	r30, 0xC0	; 192
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	80 81       	ld	r24, Z
    1db8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dba:	89 a9       	ldd	r24, Y+49	; 0x31
    1dbc:	8a 95       	dec	r24
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_sendCommand+0x920>
    1dc0:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(500);
	Set_Bit(CONTROL_PORT,E);
    1dc2:	ab e3       	ldi	r26, 0x3B	; 59
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	eb e3       	ldi	r30, 0x3B	; 59
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	88 60       	ori	r24, 0x08	; 8
    1dce:	8c 93       	st	X, r24
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	aa ef       	ldi	r26, 0xFA	; 250
    1dd6:	b3 e4       	ldi	r27, 0x43	; 67
    1dd8:	8d a7       	std	Y+45, r24	; 0x2d
    1dda:	9e a7       	std	Y+46, r25	; 0x2e
    1ddc:	af a7       	std	Y+47, r26	; 0x2f
    1dde:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1de0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1de2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1de4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de6:	98 a9       	ldd	r25, Y+48	; 0x30
    1de8:	2b ea       	ldi	r18, 0xAB	; 171
    1dea:	3a ea       	ldi	r19, 0xAA	; 170
    1dec:	4a e2       	ldi	r20, 0x2A	; 42
    1dee:	50 e4       	ldi	r21, 0x40	; 64
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	89 a7       	std	Y+41, r24	; 0x29
    1dfa:	9a a7       	std	Y+42, r25	; 0x2a
    1dfc:	ab a7       	std	Y+43, r26	; 0x2b
    1dfe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e00:	69 a5       	ldd	r22, Y+41	; 0x29
    1e02:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e04:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e06:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	1c f4       	brge	.+6      	; 0x1e1e <LCD_sendCommand+0x982>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	88 a7       	std	Y+40, r24	; 0x28
    1e1c:	91 c0       	rjmp	.+290    	; 0x1f40 <LCD_sendCommand+0xaa4>
	else if (__tmp > 255)
    1e1e:	69 a5       	ldd	r22, Y+41	; 0x29
    1e20:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e22:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e24:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	53 e4       	ldi	r21, 0x43	; 67
    1e2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	0c f0       	brlt	.+2      	; 0x1e38 <LCD_sendCommand+0x99c>
    1e36:	7b c0       	rjmp	.+246    	; 0x1f2e <LCD_sendCommand+0xa92>
	{
		_delay_ms(__us / 1000.0);
    1e38:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e3a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a e7       	ldi	r20, 0x7A	; 122
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8c a3       	std	Y+36, r24	; 0x24
    1e52:	9d a3       	std	Y+37, r25	; 0x25
    1e54:	ae a3       	std	Y+38, r26	; 0x26
    1e56:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	6c a1       	ldd	r22, Y+36	; 0x24
    1e5a:	7d a1       	ldd	r23, Y+37	; 0x25
    1e5c:	8e a1       	ldd	r24, Y+38	; 0x26
    1e5e:	9f a1       	ldd	r25, Y+39	; 0x27
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a ef       	ldi	r20, 0xFA	; 250
    1e66:	54 e4       	ldi	r21, 0x44	; 68
    1e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	88 a3       	std	Y+32, r24	; 0x20
    1e72:	99 a3       	std	Y+33, r25	; 0x21
    1e74:	aa a3       	std	Y+34, r26	; 0x22
    1e76:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1e78:	68 a1       	ldd	r22, Y+32	; 0x20
    1e7a:	79 a1       	ldd	r23, Y+33	; 0x21
    1e7c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e7e:	9b a1       	ldd	r25, Y+35	; 0x23
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <LCD_sendCommand+0x9fe>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9f 8f       	std	Y+31, r25	; 0x1f
    1e96:	8e 8f       	std	Y+30, r24	; 0x1e
    1e98:	3f c0       	rjmp	.+126    	; 0x1f18 <LCD_sendCommand+0xa7c>
	else if (__tmp > 65535)
    1e9a:	68 a1       	ldd	r22, Y+32	; 0x20
    1e9c:	79 a1       	ldd	r23, Y+33	; 0x21
    1e9e:	8a a1       	ldd	r24, Y+34	; 0x22
    1ea0:	9b a1       	ldd	r25, Y+35	; 0x23
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	4f e7       	ldi	r20, 0x7F	; 127
    1ea8:	57 e4       	ldi	r21, 0x47	; 71
    1eaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	4c f5       	brge	.+82     	; 0x1f04 <LCD_sendCommand+0xa68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	6c a1       	ldd	r22, Y+36	; 0x24
    1eb4:	7d a1       	ldd	r23, Y+37	; 0x25
    1eb6:	8e a1       	ldd	r24, Y+38	; 0x26
    1eb8:	9f a1       	ldd	r25, Y+39	; 0x27
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9f 8f       	std	Y+31, r25	; 0x1f
    1ed8:	8e 8f       	std	Y+30, r24	; 0x1e
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <LCD_sendCommand+0xa5e>
    1edc:	88 ec       	ldi	r24, 0xC8	; 200
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9d 8f       	std	Y+29, r25	; 0x1d
    1ee2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ee4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ee6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <LCD_sendCommand+0xa4c>
    1eec:	9d 8f       	std	Y+29, r25	; 0x1d
    1eee:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ef2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	9f 8f       	std	Y+31, r25	; 0x1f
    1ef8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1efc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	69 f7       	brne	.-38     	; 0x1edc <LCD_sendCommand+0xa40>
    1f02:	24 c0       	rjmp	.+72     	; 0x1f4c <LCD_sendCommand+0xab0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f04:	68 a1       	ldd	r22, Y+32	; 0x20
    1f06:	79 a1       	ldd	r23, Y+33	; 0x21
    1f08:	8a a1       	ldd	r24, Y+34	; 0x22
    1f0a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9f 8f       	std	Y+31, r25	; 0x1f
    1f16:	8e 8f       	std	Y+30, r24	; 0x1e
    1f18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f1a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f1c:	9b 8f       	std	Y+27, r25	; 0x1b
    1f1e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f22:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <LCD_sendCommand+0xa88>
    1f28:	9b 8f       	std	Y+27, r25	; 0x1b
    1f2a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <LCD_sendCommand+0xab0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f2e:	69 a5       	ldd	r22, Y+41	; 0x29
    1f30:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f34:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	88 a7       	std	Y+40, r24	; 0x28
    1f40:	88 a5       	ldd	r24, Y+40	; 0x28
    1f42:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f44:	89 8d       	ldd	r24, Y+25	; 0x19
    1f46:	8a 95       	dec	r24
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_sendCommand+0xaaa>
    1f4a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(500);
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | (0x0F & Command);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | ((0x0F & Command)<<4);
    1f4c:	ab e3       	ldi	r26, 0x3B	; 59
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	eb e3       	ldi	r30, 0x3B	; 59
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	28 2f       	mov	r18, r24
    1f58:	2f 70       	andi	r18, 0x0F	; 15
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	ef 56       	subi	r30, 0x6F	; 111
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	82 95       	swap	r24
    1f68:	92 95       	swap	r25
    1f6a:	90 7f       	andi	r25, 0xF0	; 240
    1f6c:	98 27       	eor	r25, r24
    1f6e:	80 7f       	andi	r24, 0xF0	; 240
    1f70:	98 27       	eor	r25, r24
    1f72:	82 2b       	or	r24, r18
    1f74:	8c 93       	st	X, r24
#endif
	Clear_Bit(CONTROL_PORT,E);
    1f76:	ab e3       	ldi	r26, 0x3B	; 59
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	eb e3       	ldi	r30, 0x3B	; 59
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	87 7f       	andi	r24, 0xF7	; 247
    1f82:	8c 93       	st	X, r24
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	aa ef       	ldi	r26, 0xFA	; 250
    1f8a:	b3 e4       	ldi	r27, 0x43	; 67
    1f8c:	8d 8b       	std	Y+21, r24	; 0x15
    1f8e:	9e 8b       	std	Y+22, r25	; 0x16
    1f90:	af 8b       	std	Y+23, r26	; 0x17
    1f92:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	2b ea       	ldi	r18, 0xAB	; 171
    1f9e:	3a ea       	ldi	r19, 0xAA	; 170
    1fa0:	4a e2       	ldi	r20, 0x2A	; 42
    1fa2:	50 e4       	ldi	r21, 0x40	; 64
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	89 8b       	std	Y+17, r24	; 0x11
    1fae:	9a 8b       	std	Y+18, r25	; 0x12
    1fb0:	ab 8b       	std	Y+19, r26	; 0x13
    1fb2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fb4:	69 89       	ldd	r22, Y+17	; 0x11
    1fb6:	7a 89       	ldd	r23, Y+18	; 0x12
    1fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fba:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	1c f4       	brge	.+6      	; 0x1fd2 <LCD_sendCommand+0xb36>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	88 8b       	std	Y+16, r24	; 0x10
    1fd0:	91 c0       	rjmp	.+290    	; 0x20f4 <LCD_sendCommand+0xc58>
	else if (__tmp > 255)
    1fd2:	69 89       	ldd	r22, Y+17	; 0x11
    1fd4:	7a 89       	ldd	r23, Y+18	; 0x12
    1fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4f e7       	ldi	r20, 0x7F	; 127
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fe6:	18 16       	cp	r1, r24
    1fe8:	0c f0       	brlt	.+2      	; 0x1fec <LCD_sendCommand+0xb50>
    1fea:	7b c0       	rjmp	.+246    	; 0x20e2 <LCD_sendCommand+0xc46>
	{
		_delay_ms(__us / 1000.0);
    1fec:	6d 89       	ldd	r22, Y+21	; 0x15
    1fee:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4a e7       	ldi	r20, 0x7A	; 122
    1ffa:	54 e4       	ldi	r21, 0x44	; 68
    1ffc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8c 87       	std	Y+12, r24	; 0x0c
    2006:	9d 87       	std	Y+13, r25	; 0x0d
    2008:	ae 87       	std	Y+14, r26	; 0x0e
    200a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6c 85       	ldd	r22, Y+12	; 0x0c
    200e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2010:	8e 85       	ldd	r24, Y+14	; 0x0e
    2012:	9f 85       	ldd	r25, Y+15	; 0x0f
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	88 87       	std	Y+8, r24	; 0x08
    2026:	99 87       	std	Y+9, r25	; 0x09
    2028:	aa 87       	std	Y+10, r26	; 0x0a
    202a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    202c:	68 85       	ldd	r22, Y+8	; 0x08
    202e:	79 85       	ldd	r23, Y+9	; 0x09
    2030:	8a 85       	ldd	r24, Y+10	; 0x0a
    2032:	9b 85       	ldd	r25, Y+11	; 0x0b
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_sendCommand+0xbb2>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9f 83       	std	Y+7, r25	; 0x07
    204a:	8e 83       	std	Y+6, r24	; 0x06
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <LCD_sendCommand+0xc30>
	else if (__tmp > 65535)
    204e:	68 85       	ldd	r22, Y+8	; 0x08
    2050:	79 85       	ldd	r23, Y+9	; 0x09
    2052:	8a 85       	ldd	r24, Y+10	; 0x0a
    2054:	9b 85       	ldd	r25, Y+11	; 0x0b
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <LCD_sendCommand+0xc1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6c 85       	ldd	r22, Y+12	; 0x0c
    2068:	7d 85       	ldd	r23, Y+13	; 0x0d
    206a:	8e 85       	ldd	r24, Y+14	; 0x0e
    206c:	9f 85       	ldd	r25, Y+15	; 0x0f
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9f 83       	std	Y+7, r25	; 0x07
    208c:	8e 83       	std	Y+6, r24	; 0x06
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_sendCommand+0xc12>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9d 83       	std	Y+5, r25	; 0x05
    2096:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_sendCommand+0xc00>
    20a0:	9d 83       	std	Y+5, r25	; 0x05
    20a2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8e 81       	ldd	r24, Y+6	; 0x06
    20a6:	9f 81       	ldd	r25, Y+7	; 0x07
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9f 83       	std	Y+7, r25	; 0x07
    20ac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8e 81       	ldd	r24, Y+6	; 0x06
    20b0:	9f 81       	ldd	r25, Y+7	; 0x07
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <LCD_sendCommand+0xbf4>
    20b6:	24 c0       	rjmp	.+72     	; 0x2100 <LCD_sendCommand+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	68 85       	ldd	r22, Y+8	; 0x08
    20ba:	79 85       	ldd	r23, Y+9	; 0x09
    20bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20be:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9f 83       	std	Y+7, r25	; 0x07
    20ca:	8e 83       	std	Y+6, r24	; 0x06
    20cc:	8e 81       	ldd	r24, Y+6	; 0x06
    20ce:	9f 81       	ldd	r25, Y+7	; 0x07
    20d0:	9b 83       	std	Y+3, r25	; 0x03
    20d2:	8a 83       	std	Y+2, r24	; 0x02
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_sendCommand+0xc3c>
    20dc:	9b 83       	std	Y+3, r25	; 0x03
    20de:	8a 83       	std	Y+2, r24	; 0x02
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <LCD_sendCommand+0xc64>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20e2:	69 89       	ldd	r22, Y+17	; 0x11
    20e4:	7a 89       	ldd	r23, Y+18	; 0x12
    20e6:	8b 89       	ldd	r24, Y+19	; 0x13
    20e8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	88 8b       	std	Y+16, r24	; 0x10
    20f4:	88 89       	ldd	r24, Y+16	; 0x10
    20f6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	8a 95       	dec	r24
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_sendCommand+0xc5e>
    20fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);

#endif
}
    2100:	cf 56       	subi	r28, 0x6F	; 111
    2102:	df 4f       	sbci	r29, 0xFF	; 255
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	1f 91       	pop	r17
    2114:	0f 91       	pop	r16
    2116:	08 95       	ret

00002118 <LCD_sendChar>:


void LCD_sendChar(const char Char)
{
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	c1 59       	subi	r28, 0x91	; 145
    2126:	d0 40       	sbci	r29, 0x00	; 0
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	fe 01       	movw	r30, r28
    2134:	ef 56       	subi	r30, 0x6F	; 111
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 83       	st	Z, r24
	Clear_Bit(CONTROL_PORT,E);
	_delay_us(500);


#elif defined FOUR_BIT_MODE
	Set_Bit(CONTROL_PORT,RS);
    213a:	ab e3       	ldi	r26, 0x3B	; 59
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	eb e3       	ldi	r30, 0x3B	; 59
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	82 60       	ori	r24, 0x02	; 2
    2146:	8c 93       	st	X, r24
	Clear_Bit(CONTROL_PORT,RW);
    2148:	ab e3       	ldi	r26, 0x3B	; 59
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	eb e3       	ldi	r30, 0x3B	; 59
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	8b 7f       	andi	r24, 0xFB	; 251
    2154:	8c 93       	st	X, r24
    2156:	fe 01       	movw	r30, r28
    2158:	e3 57       	subi	r30, 0x73	; 115
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	aa ef       	ldi	r26, 0xFA	; 250
    2162:	b3 e4       	ldi	r27, 0x43	; 67
    2164:	80 83       	st	Z, r24
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	a2 83       	std	Z+2, r26	; 0x02
    216a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    216c:	8e 01       	movw	r16, r28
    216e:	07 57       	subi	r16, 0x77	; 119
    2170:	1f 4f       	sbci	r17, 0xFF	; 255
    2172:	fe 01       	movw	r30, r28
    2174:	e3 57       	subi	r30, 0x73	; 115
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	2b ea       	ldi	r18, 0xAB	; 171
    2182:	3a ea       	ldi	r19, 0xAA	; 170
    2184:	4a e2       	ldi	r20, 0x2A	; 42
    2186:	50 e4       	ldi	r21, 0x40	; 64
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	f8 01       	movw	r30, r16
    2192:	80 83       	st	Z, r24
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	a2 83       	std	Z+2, r26	; 0x02
    2198:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    219a:	fe 01       	movw	r30, r28
    219c:	e7 57       	subi	r30, 0x77	; 119
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	34 f4       	brge	.+12     	; 0x21c4 <LCD_sendChar+0xac>
		__ticks = 1;
    21b8:	fe 01       	movw	r30, r28
    21ba:	e8 57       	subi	r30, 0x78	; 120
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	80 83       	st	Z, r24
    21c2:	e0 c0       	rjmp	.+448    	; 0x2384 <LCD_sendChar+0x26c>
	else if (__tmp > 255)
    21c4:	fe 01       	movw	r30, r28
    21c6:	e7 57       	subi	r30, 0x77	; 119
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	53 e4       	ldi	r21, 0x43	; 67
    21da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <LCD_sendChar+0xcc>
    21e2:	c0 c0       	rjmp	.+384    	; 0x2364 <LCD_sendChar+0x24c>
	{
		_delay_ms(__us / 1000.0);
    21e4:	fe 01       	movw	r30, r28
    21e6:	e3 57       	subi	r30, 0x73	; 115
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	60 81       	ld	r22, Z
    21ec:	71 81       	ldd	r23, Z+1	; 0x01
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	54 e4       	ldi	r21, 0x44	; 68
    21fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	fe 01       	movw	r30, r28
    2204:	ec 57       	subi	r30, 0x7C	; 124
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 83       	st	Z, r24
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	a2 83       	std	Z+2, r26	; 0x02
    220e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	8e 01       	movw	r16, r28
    2212:	00 58       	subi	r16, 0x80	; 128
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	fe 01       	movw	r30, r28
    2218:	ec 57       	subi	r30, 0x7C	; 124
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a ef       	ldi	r20, 0xFA	; 250
    222a:	54 e4       	ldi	r21, 0x44	; 68
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	f8 01       	movw	r30, r16
    2236:	80 83       	st	Z, r24
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	a2 83       	std	Z+2, r26	; 0x02
    223c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223e:	fe 01       	movw	r30, r28
    2240:	e0 58       	subi	r30, 0x80	; 128
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	44 f4       	brge	.+16     	; 0x226c <LCD_sendChar+0x154>
		__ticks = 1;
    225c:	fe 01       	movw	r30, r28
    225e:	e2 58       	subi	r30, 0x82	; 130
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
    226a:	64 c0       	rjmp	.+200    	; 0x2334 <LCD_sendChar+0x21c>
	else if (__tmp > 65535)
    226c:	fe 01       	movw	r30, r28
    226e:	e0 58       	subi	r30, 0x80	; 128
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	0c f0       	brlt	.+2      	; 0x228c <LCD_sendChar+0x174>
    228a:	43 c0       	rjmp	.+134    	; 0x2312 <LCD_sendChar+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	fe 01       	movw	r30, r28
    228e:	ec 57       	subi	r30, 0x7C	; 124
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8e 01       	movw	r16, r28
    22ac:	02 58       	subi	r16, 0x82	; 130
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	f8 01       	movw	r30, r16
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
    22c2:	1f c0       	rjmp	.+62     	; 0x2302 <LCD_sendChar+0x1ea>
    22c4:	fe 01       	movw	r30, r28
    22c6:	e4 58       	subi	r30, 0x84	; 132
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	88 ec       	ldi	r24, 0xC8	; 200
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22d2:	fe 01       	movw	r30, r28
    22d4:	e4 58       	subi	r30, 0x84	; 132
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <LCD_sendChar+0x1c4>
    22e0:	fe 01       	movw	r30, r28
    22e2:	e4 58       	subi	r30, 0x84	; 132
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	de 01       	movw	r26, r28
    22ec:	a2 58       	subi	r26, 0x82	; 130
    22ee:	bf 4f       	sbci	r27, 0xFF	; 255
    22f0:	fe 01       	movw	r30, r28
    22f2:	e2 58       	subi	r30, 0x82	; 130
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	9c 93       	st	X, r25
    2300:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	fe 01       	movw	r30, r28
    2304:	e2 58       	subi	r30, 0x82	; 130
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	d1 f6       	brne	.-76     	; 0x22c4 <LCD_sendChar+0x1ac>
    2310:	4b c0       	rjmp	.+150    	; 0x23a8 <LCD_sendChar+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	8e 01       	movw	r16, r28
    2314:	02 58       	subi	r16, 0x82	; 130
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	e0 58       	subi	r30, 0x80	; 128
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	f8 01       	movw	r30, r16
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
    2334:	de 01       	movw	r26, r28
    2336:	a6 58       	subi	r26, 0x86	; 134
    2338:	bf 4f       	sbci	r27, 0xFF	; 255
    233a:	fe 01       	movw	r30, r28
    233c:	e2 58       	subi	r30, 0x82	; 130
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	11 96       	adiw	r26, 0x01	; 1
    2346:	9c 93       	st	X, r25
    2348:	8e 93       	st	-X, r24
    234a:	fe 01       	movw	r30, r28
    234c:	e6 58       	subi	r30, 0x86	; 134
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <LCD_sendChar+0x23c>
    2358:	fe 01       	movw	r30, r28
    235a:	e6 58       	subi	r30, 0x86	; 134
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
    2362:	22 c0       	rjmp	.+68     	; 0x23a8 <LCD_sendChar+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2364:	8e 01       	movw	r16, r28
    2366:	08 57       	subi	r16, 0x78	; 120
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	fe 01       	movw	r30, r28
    236c:	e7 57       	subi	r30, 0x77	; 119
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	f8 01       	movw	r30, r16
    2382:	80 83       	st	Z, r24
    2384:	de 01       	movw	r26, r28
    2386:	a7 58       	subi	r26, 0x87	; 135
    2388:	bf 4f       	sbci	r27, 0xFF	; 255
    238a:	fe 01       	movw	r30, r28
    238c:	e8 57       	subi	r30, 0x78	; 120
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2394:	fe 01       	movw	r30, r28
    2396:	e7 58       	subi	r30, 0x87	; 135
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 81       	ld	r24, Z
    239c:	8a 95       	dec	r24
    239e:	f1 f7       	brne	.-4      	; 0x239c <LCD_sendChar+0x284>
    23a0:	fe 01       	movw	r30, r28
    23a2:	e7 58       	subi	r30, 0x87	; 135
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 83       	st	Z, r24
	_delay_us(500);
	Set_Bit(CONTROL_PORT,E);
    23a8:	ab e3       	ldi	r26, 0x3B	; 59
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	eb e3       	ldi	r30, 0x3B	; 59
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	88 60       	ori	r24, 0x08	; 8
    23b4:	8c 93       	st	X, r24
    23b6:	fe 01       	movw	r30, r28
    23b8:	eb 58       	subi	r30, 0x8B	; 139
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	aa ef       	ldi	r26, 0xFA	; 250
    23c2:	b3 e4       	ldi	r27, 0x43	; 67
    23c4:	80 83       	st	Z, r24
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	a2 83       	std	Z+2, r26	; 0x02
    23ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23cc:	8e 01       	movw	r16, r28
    23ce:	0f 58       	subi	r16, 0x8F	; 143
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	fe 01       	movw	r30, r28
    23d4:	eb 58       	subi	r30, 0x8B	; 139
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	60 81       	ld	r22, Z
    23da:	71 81       	ldd	r23, Z+1	; 0x01
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	2b ea       	ldi	r18, 0xAB	; 171
    23e2:	3a ea       	ldi	r19, 0xAA	; 170
    23e4:	4a e2       	ldi	r20, 0x2A	; 42
    23e6:	50 e4       	ldi	r21, 0x40	; 64
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	f8 01       	movw	r30, r16
    23f2:	80 83       	st	Z, r24
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	a2 83       	std	Z+2, r26	; 0x02
    23f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23fa:	fe 01       	movw	r30, r28
    23fc:	ef 58       	subi	r30, 0x8F	; 143
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	60 81       	ld	r22, Z
    2402:	71 81       	ldd	r23, Z+1	; 0x01
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	34 f4       	brge	.+12     	; 0x2424 <LCD_sendChar+0x30c>
		__ticks = 1;
    2418:	fe 01       	movw	r30, r28
    241a:	e0 59       	subi	r30, 0x90	; 144
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	80 83       	st	Z, r24
    2422:	e0 c0       	rjmp	.+448    	; 0x25e4 <LCD_sendChar+0x4cc>
	else if (__tmp > 255)
    2424:	fe 01       	movw	r30, r28
    2426:	ef 58       	subi	r30, 0x8F	; 143
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4f e7       	ldi	r20, 0x7F	; 127
    2438:	53 e4       	ldi	r21, 0x43	; 67
    243a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    243e:	18 16       	cp	r1, r24
    2440:	0c f0       	brlt	.+2      	; 0x2444 <LCD_sendChar+0x32c>
    2442:	c0 c0       	rjmp	.+384    	; 0x25c4 <LCD_sendChar+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    2444:	fe 01       	movw	r30, r28
    2446:	eb 58       	subi	r30, 0x8B	; 139
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a e7       	ldi	r20, 0x7A	; 122
    2458:	54 e4       	ldi	r21, 0x44	; 68
    245a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	fe 01       	movw	r30, r28
    2464:	e4 59       	subi	r30, 0x94	; 148
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 83       	st	Z, r24
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	a2 83       	std	Z+2, r26	; 0x02
    246e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2470:	8e 01       	movw	r16, r28
    2472:	08 59       	subi	r16, 0x98	; 152
    2474:	1f 4f       	sbci	r17, 0xFF	; 255
    2476:	fe 01       	movw	r30, r28
    2478:	e4 59       	subi	r30, 0x94	; 148
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a ef       	ldi	r20, 0xFA	; 250
    248a:	54 e4       	ldi	r21, 0x44	; 68
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	f8 01       	movw	r30, r16
    2496:	80 83       	st	Z, r24
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	a2 83       	std	Z+2, r26	; 0x02
    249c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    249e:	fe 01       	movw	r30, r28
    24a0:	e8 59       	subi	r30, 0x98	; 152
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	44 f4       	brge	.+16     	; 0x24cc <LCD_sendChar+0x3b4>
		__ticks = 1;
    24bc:	fe 01       	movw	r30, r28
    24be:	ea 59       	subi	r30, 0x9A	; 154
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	80 83       	st	Z, r24
    24ca:	64 c0       	rjmp	.+200    	; 0x2594 <LCD_sendChar+0x47c>
	else if (__tmp > 65535)
    24cc:	fe 01       	movw	r30, r28
    24ce:	e8 59       	subi	r30, 0x98	; 152
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	0c f0       	brlt	.+2      	; 0x24ec <LCD_sendChar+0x3d4>
    24ea:	43 c0       	rjmp	.+134    	; 0x2572 <LCD_sendChar+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	fe 01       	movw	r30, r28
    24ee:	e4 59       	subi	r30, 0x94	; 148
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e2       	ldi	r20, 0x20	; 32
    2500:	51 e4       	ldi	r21, 0x41	; 65
    2502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	8e 01       	movw	r16, r28
    250c:	0a 59       	subi	r16, 0x9A	; 154
    250e:	1f 4f       	sbci	r17, 0xFF	; 255
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	f8 01       	movw	r30, r16
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
    2522:	1f c0       	rjmp	.+62     	; 0x2562 <LCD_sendChar+0x44a>
    2524:	fe 01       	movw	r30, r28
    2526:	ec 59       	subi	r30, 0x9C	; 156
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	88 ec       	ldi	r24, 0xC8	; 200
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2532:	fe 01       	movw	r30, r28
    2534:	ec 59       	subi	r30, 0x9C	; 156
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_sendChar+0x424>
    2540:	fe 01       	movw	r30, r28
    2542:	ec 59       	subi	r30, 0x9C	; 156
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	de 01       	movw	r26, r28
    254c:	aa 59       	subi	r26, 0x9A	; 154
    254e:	bf 4f       	sbci	r27, 0xFF	; 255
    2550:	fe 01       	movw	r30, r28
    2552:	ea 59       	subi	r30, 0x9A	; 154
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	11 96       	adiw	r26, 0x01	; 1
    255e:	9c 93       	st	X, r25
    2560:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	fe 01       	movw	r30, r28
    2564:	ea 59       	subi	r30, 0x9A	; 154
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	d1 f6       	brne	.-76     	; 0x2524 <LCD_sendChar+0x40c>
    2570:	4b c0       	rjmp	.+150    	; 0x2608 <LCD_sendChar+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2572:	8e 01       	movw	r16, r28
    2574:	0a 59       	subi	r16, 0x9A	; 154
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	e8 59       	subi	r30, 0x98	; 152
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	f8 01       	movw	r30, r16
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	80 83       	st	Z, r24
    2594:	de 01       	movw	r26, r28
    2596:	ae 59       	subi	r26, 0x9E	; 158
    2598:	bf 4f       	sbci	r27, 0xFF	; 255
    259a:	fe 01       	movw	r30, r28
    259c:	ea 59       	subi	r30, 0x9A	; 154
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	91 81       	ldd	r25, Z+1	; 0x01
    25a4:	11 96       	adiw	r26, 0x01	; 1
    25a6:	9c 93       	st	X, r25
    25a8:	8e 93       	st	-X, r24
    25aa:	fe 01       	movw	r30, r28
    25ac:	ee 59       	subi	r30, 0x9E	; 158
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <LCD_sendChar+0x49c>
    25b8:	fe 01       	movw	r30, r28
    25ba:	ee 59       	subi	r30, 0x9E	; 158
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	80 83       	st	Z, r24
    25c2:	22 c0       	rjmp	.+68     	; 0x2608 <LCD_sendChar+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25c4:	8e 01       	movw	r16, r28
    25c6:	00 59       	subi	r16, 0x90	; 144
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	ef 58       	subi	r30, 0x8F	; 143
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	f8 01       	movw	r30, r16
    25e2:	80 83       	st	Z, r24
    25e4:	de 01       	movw	r26, r28
    25e6:	af 59       	subi	r26, 0x9F	; 159
    25e8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ea:	fe 01       	movw	r30, r28
    25ec:	e0 59       	subi	r30, 0x90	; 144
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25f4:	fe 01       	movw	r30, r28
    25f6:	ef 59       	subi	r30, 0x9F	; 159
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	8a 95       	dec	r24
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCD_sendChar+0x4e4>
    2600:	fe 01       	movw	r30, r28
    2602:	ef 59       	subi	r30, 0x9F	; 159
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 83       	st	Z, r24
	_delay_us(500);
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | ((0xF0 & Char) >> 4);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | (0xF0 & Char);
    2608:	ab e3       	ldi	r26, 0x3B	; 59
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	eb e3       	ldi	r30, 0x3B	; 59
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	98 2f       	mov	r25, r24
    2614:	9f 70       	andi	r25, 0x0F	; 15
    2616:	fe 01       	movw	r30, r28
    2618:	ef 56       	subi	r30, 0x6F	; 111
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	80 7f       	andi	r24, 0xF0	; 240
    2620:	89 2b       	or	r24, r25
    2622:	8c 93       	st	X, r24
    2624:	fe 01       	movw	r30, r28
    2626:	e3 5a       	subi	r30, 0xA3	; 163
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	aa ef       	ldi	r26, 0xFA	; 250
    2630:	b3 e4       	ldi	r27, 0x43	; 67
    2632:	80 83       	st	Z, r24
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	a2 83       	std	Z+2, r26	; 0x02
    2638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    263a:	8e 01       	movw	r16, r28
    263c:	07 5a       	subi	r16, 0xA7	; 167
    263e:	1f 4f       	sbci	r17, 0xFF	; 255
    2640:	fe 01       	movw	r30, r28
    2642:	e3 5a       	subi	r30, 0xA3	; 163
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	2b ea       	ldi	r18, 0xAB	; 171
    2650:	3a ea       	ldi	r19, 0xAA	; 170
    2652:	4a e2       	ldi	r20, 0x2A	; 42
    2654:	50 e4       	ldi	r21, 0x40	; 64
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	f8 01       	movw	r30, r16
    2660:	80 83       	st	Z, r24
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	a2 83       	std	Z+2, r26	; 0x02
    2666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2668:	fe 01       	movw	r30, r28
    266a:	e7 5a       	subi	r30, 0xA7	; 167
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e8       	ldi	r20, 0x80	; 128
    267c:	5f e3       	ldi	r21, 0x3F	; 63
    267e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2682:	88 23       	and	r24, r24
    2684:	34 f4       	brge	.+12     	; 0x2692 <LCD_sendChar+0x57a>
		__ticks = 1;
    2686:	fe 01       	movw	r30, r28
    2688:	e8 5a       	subi	r30, 0xA8	; 168
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	80 83       	st	Z, r24
    2690:	e0 c0       	rjmp	.+448    	; 0x2852 <LCD_sendChar+0x73a>
	else if (__tmp > 255)
    2692:	fe 01       	movw	r30, r28
    2694:	e7 5a       	subi	r30, 0xA7	; 167
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	60 81       	ld	r22, Z
    269a:	71 81       	ldd	r23, Z+1	; 0x01
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	53 e4       	ldi	r21, 0x43	; 67
    26a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	0c f0       	brlt	.+2      	; 0x26b2 <LCD_sendChar+0x59a>
    26b0:	c0 c0       	rjmp	.+384    	; 0x2832 <LCD_sendChar+0x71a>
	{
		_delay_ms(__us / 1000.0);
    26b2:	fe 01       	movw	r30, r28
    26b4:	e3 5a       	subi	r30, 0xA3	; 163
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a e7       	ldi	r20, 0x7A	; 122
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	fe 01       	movw	r30, r28
    26d2:	ec 5a       	subi	r30, 0xAC	; 172
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 83       	st	Z, r24
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	a2 83       	std	Z+2, r26	; 0x02
    26dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26de:	8e 01       	movw	r16, r28
    26e0:	00 5b       	subi	r16, 0xB0	; 176
    26e2:	1f 4f       	sbci	r17, 0xFF	; 255
    26e4:	fe 01       	movw	r30, r28
    26e6:	ec 5a       	subi	r30, 0xAC	; 172
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4a ef       	ldi	r20, 0xFA	; 250
    26f8:	54 e4       	ldi	r21, 0x44	; 68
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	f8 01       	movw	r30, r16
    2704:	80 83       	st	Z, r24
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	a2 83       	std	Z+2, r26	; 0x02
    270a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    270c:	fe 01       	movw	r30, r28
    270e:	e0 5b       	subi	r30, 0xB0	; 176
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	44 f4       	brge	.+16     	; 0x273a <LCD_sendChar+0x622>
		__ticks = 1;
    272a:	fe 01       	movw	r30, r28
    272c:	e2 5b       	subi	r30, 0xB2	; 178
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	91 83       	std	Z+1, r25	; 0x01
    2736:	80 83       	st	Z, r24
    2738:	64 c0       	rjmp	.+200    	; 0x2802 <LCD_sendChar+0x6ea>
	else if (__tmp > 65535)
    273a:	fe 01       	movw	r30, r28
    273c:	e0 5b       	subi	r30, 0xB0	; 176
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	0c f0       	brlt	.+2      	; 0x275a <LCD_sendChar+0x642>
    2758:	43 c0       	rjmp	.+134    	; 0x27e0 <LCD_sendChar+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	fe 01       	movw	r30, r28
    275c:	ec 5a       	subi	r30, 0xAC	; 172
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e2       	ldi	r20, 0x20	; 32
    276e:	51 e4       	ldi	r21, 0x41	; 65
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	8e 01       	movw	r16, r28
    277a:	02 5b       	subi	r16, 0xB2	; 178
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	bc 01       	movw	r22, r24
    2780:	cd 01       	movw	r24, r26
    2782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	f8 01       	movw	r30, r16
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
    2790:	1f c0       	rjmp	.+62     	; 0x27d0 <LCD_sendChar+0x6b8>
    2792:	fe 01       	movw	r30, r28
    2794:	e4 5b       	subi	r30, 0xB4	; 180
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	88 ec       	ldi	r24, 0xC8	; 200
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27a0:	fe 01       	movw	r30, r28
    27a2:	e4 5b       	subi	r30, 0xB4	; 180
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <LCD_sendChar+0x692>
    27ae:	fe 01       	movw	r30, r28
    27b0:	e4 5b       	subi	r30, 0xB4	; 180
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	de 01       	movw	r26, r28
    27ba:	a2 5b       	subi	r26, 0xB2	; 178
    27bc:	bf 4f       	sbci	r27, 0xFF	; 255
    27be:	fe 01       	movw	r30, r28
    27c0:	e2 5b       	subi	r30, 0xB2	; 178
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	11 96       	adiw	r26, 0x01	; 1
    27cc:	9c 93       	st	X, r25
    27ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d0:	fe 01       	movw	r30, r28
    27d2:	e2 5b       	subi	r30, 0xB2	; 178
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 81       	ld	r24, Z
    27d8:	91 81       	ldd	r25, Z+1	; 0x01
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	d1 f6       	brne	.-76     	; 0x2792 <LCD_sendChar+0x67a>
    27de:	4b c0       	rjmp	.+150    	; 0x2876 <LCD_sendChar+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e0:	8e 01       	movw	r16, r28
    27e2:	02 5b       	subi	r16, 0xB2	; 178
    27e4:	1f 4f       	sbci	r17, 0xFF	; 255
    27e6:	fe 01       	movw	r30, r28
    27e8:	e0 5b       	subi	r30, 0xB0	; 176
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	f8 01       	movw	r30, r16
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	80 83       	st	Z, r24
    2802:	de 01       	movw	r26, r28
    2804:	a6 5b       	subi	r26, 0xB6	; 182
    2806:	bf 4f       	sbci	r27, 0xFF	; 255
    2808:	fe 01       	movw	r30, r28
    280a:	e2 5b       	subi	r30, 0xB2	; 178
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	80 81       	ld	r24, Z
    2810:	91 81       	ldd	r25, Z+1	; 0x01
    2812:	11 96       	adiw	r26, 0x01	; 1
    2814:	9c 93       	st	X, r25
    2816:	8e 93       	st	-X, r24
    2818:	fe 01       	movw	r30, r28
    281a:	e6 5b       	subi	r30, 0xB6	; 182
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	91 81       	ldd	r25, Z+1	; 0x01
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_sendChar+0x70a>
    2826:	fe 01       	movw	r30, r28
    2828:	e6 5b       	subi	r30, 0xB6	; 182
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
    2830:	22 c0       	rjmp	.+68     	; 0x2876 <LCD_sendChar+0x75e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2832:	8e 01       	movw	r16, r28
    2834:	08 5a       	subi	r16, 0xA8	; 168
    2836:	1f 4f       	sbci	r17, 0xFF	; 255
    2838:	fe 01       	movw	r30, r28
    283a:	e7 5a       	subi	r30, 0xA7	; 167
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	f8 01       	movw	r30, r16
    2850:	80 83       	st	Z, r24
    2852:	de 01       	movw	r26, r28
    2854:	a7 5b       	subi	r26, 0xB7	; 183
    2856:	bf 4f       	sbci	r27, 0xFF	; 255
    2858:	fe 01       	movw	r30, r28
    285a:	e8 5a       	subi	r30, 0xA8	; 168
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 81       	ld	r24, Z
    2860:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2862:	fe 01       	movw	r30, r28
    2864:	e7 5b       	subi	r30, 0xB7	; 183
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	8a 95       	dec	r24
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_sendChar+0x752>
    286e:	fe 01       	movw	r30, r28
    2870:	e7 5b       	subi	r30, 0xB7	; 183
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 83       	st	Z, r24
#endif
	_delay_us(500);
	Clear_Bit(CONTROL_PORT,E);
    2876:	ab e3       	ldi	r26, 0x3B	; 59
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	eb e3       	ldi	r30, 0x3B	; 59
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	87 7f       	andi	r24, 0xF7	; 247
    2882:	8c 93       	st	X, r24
    2884:	fe 01       	movw	r30, r28
    2886:	eb 5b       	subi	r30, 0xBB	; 187
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	aa ef       	ldi	r26, 0xFA	; 250
    2890:	b3 e4       	ldi	r27, 0x43	; 67
    2892:	80 83       	st	Z, r24
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	a2 83       	std	Z+2, r26	; 0x02
    2898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    289a:	8e 01       	movw	r16, r28
    289c:	0f 5b       	subi	r16, 0xBF	; 191
    289e:	1f 4f       	sbci	r17, 0xFF	; 255
    28a0:	fe 01       	movw	r30, r28
    28a2:	eb 5b       	subi	r30, 0xBB	; 187
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	60 81       	ld	r22, Z
    28a8:	71 81       	ldd	r23, Z+1	; 0x01
    28aa:	82 81       	ldd	r24, Z+2	; 0x02
    28ac:	93 81       	ldd	r25, Z+3	; 0x03
    28ae:	2b ea       	ldi	r18, 0xAB	; 171
    28b0:	3a ea       	ldi	r19, 0xAA	; 170
    28b2:	4a e2       	ldi	r20, 0x2A	; 42
    28b4:	50 e4       	ldi	r21, 0x40	; 64
    28b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	f8 01       	movw	r30, r16
    28c0:	80 83       	st	Z, r24
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	a2 83       	std	Z+2, r26	; 0x02
    28c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28c8:	fe 01       	movw	r30, r28
    28ca:	ef 5b       	subi	r30, 0xBF	; 191
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e8       	ldi	r20, 0x80	; 128
    28dc:	5f e3       	ldi	r21, 0x3F	; 63
    28de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e2:	88 23       	and	r24, r24
    28e4:	34 f4       	brge	.+12     	; 0x28f2 <LCD_sendChar+0x7da>
		__ticks = 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	fe 01       	movw	r30, r28
    28ea:	e0 5c       	subi	r30, 0xC0	; 192
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 83       	st	Z, r24
    28f0:	9d c0       	rjmp	.+314    	; 0x2a2c <LCD_sendChar+0x914>
	else if (__tmp > 255)
    28f2:	fe 01       	movw	r30, r28
    28f4:	ef 5b       	subi	r30, 0xBF	; 191
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4f e7       	ldi	r20, 0x7F	; 127
    2906:	53 e4       	ldi	r21, 0x43	; 67
    2908:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    290c:	18 16       	cp	r1, r24
    290e:	0c f0       	brlt	.+2      	; 0x2912 <LCD_sendChar+0x7fa>
    2910:	7e c0       	rjmp	.+252    	; 0x2a0e <LCD_sendChar+0x8f6>
	{
		_delay_ms(__us / 1000.0);
    2912:	fe 01       	movw	r30, r28
    2914:	eb 5b       	subi	r30, 0xBB	; 187
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a e7       	ldi	r20, 0x7A	; 122
    2926:	54 e4       	ldi	r21, 0x44	; 68
    2928:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8c af       	std	Y+60, r24	; 0x3c
    2932:	9d af       	std	Y+61, r25	; 0x3d
    2934:	ae af       	std	Y+62, r26	; 0x3e
    2936:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2938:	6c ad       	ldd	r22, Y+60	; 0x3c
    293a:	7d ad       	ldd	r23, Y+61	; 0x3d
    293c:	8e ad       	ldd	r24, Y+62	; 0x3e
    293e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a ef       	ldi	r20, 0xFA	; 250
    2946:	54 e4       	ldi	r21, 0x44	; 68
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	88 af       	std	Y+56, r24	; 0x38
    2952:	99 af       	std	Y+57, r25	; 0x39
    2954:	aa af       	std	Y+58, r26	; 0x3a
    2956:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2958:	68 ad       	ldd	r22, Y+56	; 0x38
    295a:	79 ad       	ldd	r23, Y+57	; 0x39
    295c:	8a ad       	ldd	r24, Y+58	; 0x3a
    295e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	2c f4       	brge	.+10     	; 0x297a <LCD_sendChar+0x862>
		__ticks = 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9f ab       	std	Y+55, r25	; 0x37
    2976:	8e ab       	std	Y+54, r24	; 0x36
    2978:	3f c0       	rjmp	.+126    	; 0x29f8 <LCD_sendChar+0x8e0>
	else if (__tmp > 65535)
    297a:	68 ad       	ldd	r22, Y+56	; 0x38
    297c:	79 ad       	ldd	r23, Y+57	; 0x39
    297e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2980:	9b ad       	ldd	r25, Y+59	; 0x3b
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	4c f5       	brge	.+82     	; 0x29e4 <LCD_sendChar+0x8cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2992:	6c ad       	ldd	r22, Y+60	; 0x3c
    2994:	7d ad       	ldd	r23, Y+61	; 0x3d
    2996:	8e ad       	ldd	r24, Y+62	; 0x3e
    2998:	9f ad       	ldd	r25, Y+63	; 0x3f
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e2       	ldi	r20, 0x20	; 32
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9f ab       	std	Y+55, r25	; 0x37
    29b8:	8e ab       	std	Y+54, r24	; 0x36
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <LCD_sendChar+0x8c2>
    29bc:	88 ec       	ldi	r24, 0xC8	; 200
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9d ab       	std	Y+53, r25	; 0x35
    29c2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29c4:	8c a9       	ldd	r24, Y+52	; 0x34
    29c6:	9d a9       	ldd	r25, Y+53	; 0x35
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_sendChar+0x8b0>
    29cc:	9d ab       	std	Y+53, r25	; 0x35
    29ce:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d0:	8e a9       	ldd	r24, Y+54	; 0x36
    29d2:	9f a9       	ldd	r25, Y+55	; 0x37
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	9f ab       	std	Y+55, r25	; 0x37
    29d8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	8e a9       	ldd	r24, Y+54	; 0x36
    29dc:	9f a9       	ldd	r25, Y+55	; 0x37
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	69 f7       	brne	.-38     	; 0x29bc <LCD_sendChar+0x8a4>
    29e2:	2d c0       	rjmp	.+90     	; 0x2a3e <LCD_sendChar+0x926>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e4:	68 ad       	ldd	r22, Y+56	; 0x38
    29e6:	79 ad       	ldd	r23, Y+57	; 0x39
    29e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    29ea:	9b ad       	ldd	r25, Y+59	; 0x3b
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9f ab       	std	Y+55, r25	; 0x37
    29f6:	8e ab       	std	Y+54, r24	; 0x36
    29f8:	8e a9       	ldd	r24, Y+54	; 0x36
    29fa:	9f a9       	ldd	r25, Y+55	; 0x37
    29fc:	9b ab       	std	Y+51, r25	; 0x33
    29fe:	8a ab       	std	Y+50, r24	; 0x32
    2a00:	8a a9       	ldd	r24, Y+50	; 0x32
    2a02:	9b a9       	ldd	r25, Y+51	; 0x33
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_sendChar+0x8ec>
    2a08:	9b ab       	std	Y+51, r25	; 0x33
    2a0a:	8a ab       	std	Y+50, r24	; 0x32
    2a0c:	18 c0       	rjmp	.+48     	; 0x2a3e <LCD_sendChar+0x926>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a0e:	fe 01       	movw	r30, r28
    2a10:	ef 5b       	subi	r30, 0xBF	; 191
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	fe 01       	movw	r30, r28
    2a26:	e0 5c       	subi	r30, 0xC0	; 192
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 83       	st	Z, r24
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e0 5c       	subi	r30, 0xC0	; 192
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a36:	89 a9       	ldd	r24, Y+49	; 0x31
    2a38:	8a 95       	dec	r24
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_sendChar+0x920>
    2a3c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(500);
	Set_Bit(CONTROL_PORT,E);
    2a3e:	ab e3       	ldi	r26, 0x3B	; 59
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	eb e3       	ldi	r30, 0x3B	; 59
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	88 60       	ori	r24, 0x08	; 8
    2a4a:	8c 93       	st	X, r24
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	aa ef       	ldi	r26, 0xFA	; 250
    2a52:	b3 e4       	ldi	r27, 0x43	; 67
    2a54:	8d a7       	std	Y+45, r24	; 0x2d
    2a56:	9e a7       	std	Y+46, r25	; 0x2e
    2a58:	af a7       	std	Y+47, r26	; 0x2f
    2a5a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a62:	98 a9       	ldd	r25, Y+48	; 0x30
    2a64:	2b ea       	ldi	r18, 0xAB	; 171
    2a66:	3a ea       	ldi	r19, 0xAA	; 170
    2a68:	4a e2       	ldi	r20, 0x2A	; 42
    2a6a:	50 e4       	ldi	r21, 0x40	; 64
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	89 a7       	std	Y+41, r24	; 0x29
    2a76:	9a a7       	std	Y+42, r25	; 0x2a
    2a78:	ab a7       	std	Y+43, r26	; 0x2b
    2a7a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2a7c:	69 a5       	ldd	r22, Y+41	; 0x29
    2a7e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a82:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e8       	ldi	r20, 0x80	; 128
    2a8a:	5f e3       	ldi	r21, 0x3F	; 63
    2a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a90:	88 23       	and	r24, r24
    2a92:	1c f4       	brge	.+6      	; 0x2a9a <LCD_sendChar+0x982>
		__ticks = 1;
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	88 a7       	std	Y+40, r24	; 0x28
    2a98:	91 c0       	rjmp	.+290    	; 0x2bbc <LCD_sendChar+0xaa4>
	else if (__tmp > 255)
    2a9a:	69 a5       	ldd	r22, Y+41	; 0x29
    2a9c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aa0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	4f e7       	ldi	r20, 0x7F	; 127
    2aa8:	53 e4       	ldi	r21, 0x43	; 67
    2aaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aae:	18 16       	cp	r1, r24
    2ab0:	0c f0       	brlt	.+2      	; 0x2ab4 <LCD_sendChar+0x99c>
    2ab2:	7b c0       	rjmp	.+246    	; 0x2baa <LCD_sendChar+0xa92>
	{
		_delay_ms(__us / 1000.0);
    2ab4:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ab6:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ab8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aba:	98 a9       	ldd	r25, Y+48	; 0x30
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	4a e7       	ldi	r20, 0x7A	; 122
    2ac2:	54 e4       	ldi	r21, 0x44	; 68
    2ac4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	8c a3       	std	Y+36, r24	; 0x24
    2ace:	9d a3       	std	Y+37, r25	; 0x25
    2ad0:	ae a3       	std	Y+38, r26	; 0x26
    2ad2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	6c a1       	ldd	r22, Y+36	; 0x24
    2ad6:	7d a1       	ldd	r23, Y+37	; 0x25
    2ad8:	8e a1       	ldd	r24, Y+38	; 0x26
    2ada:	9f a1       	ldd	r25, Y+39	; 0x27
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a ef       	ldi	r20, 0xFA	; 250
    2ae2:	54 e4       	ldi	r21, 0x44	; 68
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	88 a3       	std	Y+32, r24	; 0x20
    2aee:	99 a3       	std	Y+33, r25	; 0x21
    2af0:	aa a3       	std	Y+34, r26	; 0x22
    2af2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2af4:	68 a1       	ldd	r22, Y+32	; 0x20
    2af6:	79 a1       	ldd	r23, Y+33	; 0x21
    2af8:	8a a1       	ldd	r24, Y+34	; 0x22
    2afa:	9b a1       	ldd	r25, Y+35	; 0x23
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <LCD_sendChar+0x9fe>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9f 8f       	std	Y+31, r25	; 0x1f
    2b12:	8e 8f       	std	Y+30, r24	; 0x1e
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <LCD_sendChar+0xa7c>
	else if (__tmp > 65535)
    2b16:	68 a1       	ldd	r22, Y+32	; 0x20
    2b18:	79 a1       	ldd	r23, Y+33	; 0x21
    2b1a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b1c:	9b a1       	ldd	r25, Y+35	; 0x23
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <LCD_sendChar+0xa68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	6c a1       	ldd	r22, Y+36	; 0x24
    2b30:	7d a1       	ldd	r23, Y+37	; 0x25
    2b32:	8e a1       	ldd	r24, Y+38	; 0x26
    2b34:	9f a1       	ldd	r25, Y+39	; 0x27
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9f 8f       	std	Y+31, r25	; 0x1f
    2b54:	8e 8f       	std	Y+30, r24	; 0x1e
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <LCD_sendChar+0xa5e>
    2b58:	88 ec       	ldi	r24, 0xC8	; 200
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	9d 8f       	std	Y+29, r25	; 0x1d
    2b5e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b60:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b62:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_sendChar+0xa4c>
    2b68:	9d 8f       	std	Y+29, r25	; 0x1d
    2b6a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	9f 8f       	std	Y+31, r25	; 0x1f
    2b74:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b78:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <LCD_sendChar+0xa40>
    2b7e:	24 c0       	rjmp	.+72     	; 0x2bc8 <LCD_sendChar+0xab0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	68 a1       	ldd	r22, Y+32	; 0x20
    2b82:	79 a1       	ldd	r23, Y+33	; 0x21
    2b84:	8a a1       	ldd	r24, Y+34	; 0x22
    2b86:	9b a1       	ldd	r25, Y+35	; 0x23
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9f 8f       	std	Y+31, r25	; 0x1f
    2b92:	8e 8f       	std	Y+30, r24	; 0x1e
    2b94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b96:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b98:	9b 8f       	std	Y+27, r25	; 0x1b
    2b9a:	8a 8f       	std	Y+26, r24	; 0x1a
    2b9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <LCD_sendChar+0xa88>
    2ba4:	9b 8f       	std	Y+27, r25	; 0x1b
    2ba6:	8a 8f       	std	Y+26, r24	; 0x1a
    2ba8:	0f c0       	rjmp	.+30     	; 0x2bc8 <LCD_sendChar+0xab0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2baa:	69 a5       	ldd	r22, Y+41	; 0x29
    2bac:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bae:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	88 a7       	std	Y+40, r24	; 0x28
    2bbc:	88 a5       	ldd	r24, Y+40	; 0x28
    2bbe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bc0:	89 8d       	ldd	r24, Y+25	; 0x19
    2bc2:	8a 95       	dec	r24
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <LCD_sendChar+0xaaa>
    2bc6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(500);
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | (0x0F & Char);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | ((0x0F & Char) << 4);
    2bc8:	ab e3       	ldi	r26, 0x3B	; 59
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	eb e3       	ldi	r30, 0x3B	; 59
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	2f 70       	andi	r18, 0x0F	; 15
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ef 56       	subi	r30, 0x6F	; 111
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	82 95       	swap	r24
    2be4:	92 95       	swap	r25
    2be6:	90 7f       	andi	r25, 0xF0	; 240
    2be8:	98 27       	eor	r25, r24
    2bea:	80 7f       	andi	r24, 0xF0	; 240
    2bec:	98 27       	eor	r25, r24
    2bee:	82 2b       	or	r24, r18
    2bf0:	8c 93       	st	X, r24
#endif
	Clear_Bit(CONTROL_PORT,E);
    2bf2:	ab e3       	ldi	r26, 0x3B	; 59
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	eb e3       	ldi	r30, 0x3B	; 59
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	87 7f       	andi	r24, 0xF7	; 247
    2bfe:	8c 93       	st	X, r24
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	aa ef       	ldi	r26, 0xFA	; 250
    2c06:	b3 e4       	ldi	r27, 0x43	; 67
    2c08:	8d 8b       	std	Y+21, r24	; 0x15
    2c0a:	9e 8b       	std	Y+22, r25	; 0x16
    2c0c:	af 8b       	std	Y+23, r26	; 0x17
    2c0e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c10:	6d 89       	ldd	r22, Y+21	; 0x15
    2c12:	7e 89       	ldd	r23, Y+22	; 0x16
    2c14:	8f 89       	ldd	r24, Y+23	; 0x17
    2c16:	98 8d       	ldd	r25, Y+24	; 0x18
    2c18:	2b ea       	ldi	r18, 0xAB	; 171
    2c1a:	3a ea       	ldi	r19, 0xAA	; 170
    2c1c:	4a e2       	ldi	r20, 0x2A	; 42
    2c1e:	50 e4       	ldi	r21, 0x40	; 64
    2c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	89 8b       	std	Y+17, r24	; 0x11
    2c2a:	9a 8b       	std	Y+18, r25	; 0x12
    2c2c:	ab 8b       	std	Y+19, r26	; 0x13
    2c2e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c30:	69 89       	ldd	r22, Y+17	; 0x11
    2c32:	7a 89       	ldd	r23, Y+18	; 0x12
    2c34:	8b 89       	ldd	r24, Y+19	; 0x13
    2c36:	9c 89       	ldd	r25, Y+20	; 0x14
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e8       	ldi	r20, 0x80	; 128
    2c3e:	5f e3       	ldi	r21, 0x3F	; 63
    2c40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c44:	88 23       	and	r24, r24
    2c46:	1c f4       	brge	.+6      	; 0x2c4e <LCD_sendChar+0xb36>
		__ticks = 1;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	88 8b       	std	Y+16, r24	; 0x10
    2c4c:	91 c0       	rjmp	.+290    	; 0x2d70 <LCD_sendChar+0xc58>
	else if (__tmp > 255)
    2c4e:	69 89       	ldd	r22, Y+17	; 0x11
    2c50:	7a 89       	ldd	r23, Y+18	; 0x12
    2c52:	8b 89       	ldd	r24, Y+19	; 0x13
    2c54:	9c 89       	ldd	r25, Y+20	; 0x14
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4f e7       	ldi	r20, 0x7F	; 127
    2c5c:	53 e4       	ldi	r21, 0x43	; 67
    2c5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c62:	18 16       	cp	r1, r24
    2c64:	0c f0       	brlt	.+2      	; 0x2c68 <LCD_sendChar+0xb50>
    2c66:	7b c0       	rjmp	.+246    	; 0x2d5e <LCD_sendChar+0xc46>
	{
		_delay_ms(__us / 1000.0);
    2c68:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	4a e7       	ldi	r20, 0x7A	; 122
    2c76:	54 e4       	ldi	r21, 0x44	; 68
    2c78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	8c 87       	std	Y+12, r24	; 0x0c
    2c82:	9d 87       	std	Y+13, r25	; 0x0d
    2c84:	ae 87       	std	Y+14, r26	; 0x0e
    2c86:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a ef       	ldi	r20, 0xFA	; 250
    2c96:	54 e4       	ldi	r21, 0x44	; 68
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	88 87       	std	Y+8, r24	; 0x08
    2ca2:	99 87       	std	Y+9, r25	; 0x09
    2ca4:	aa 87       	std	Y+10, r26	; 0x0a
    2ca6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ca8:	68 85       	ldd	r22, Y+8	; 0x08
    2caa:	79 85       	ldd	r23, Y+9	; 0x09
    2cac:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cae:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <LCD_sendChar+0xbb2>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9f 83       	std	Y+7, r25	; 0x07
    2cc6:	8e 83       	std	Y+6, r24	; 0x06
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <LCD_sendChar+0xc30>
	else if (__tmp > 65535)
    2cca:	68 85       	ldd	r22, Y+8	; 0x08
    2ccc:	79 85       	ldd	r23, Y+9	; 0x09
    2cce:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <LCD_sendChar+0xc1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ce4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ce6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ce8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9f 83       	std	Y+7, r25	; 0x07
    2d08:	8e 83       	std	Y+6, r24	; 0x06
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <LCD_sendChar+0xc12>
    2d0c:	88 ec       	ldi	r24, 0xC8	; 200
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9d 83       	std	Y+5, r25	; 0x05
    2d12:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d14:	8c 81       	ldd	r24, Y+4	; 0x04
    2d16:	9d 81       	ldd	r25, Y+5	; 0x05
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_sendChar+0xc00>
    2d1c:	9d 83       	std	Y+5, r25	; 0x05
    2d1e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8e 81       	ldd	r24, Y+6	; 0x06
    2d22:	9f 81       	ldd	r25, Y+7	; 0x07
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9f 83       	std	Y+7, r25	; 0x07
    2d28:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <LCD_sendChar+0xbf4>
    2d32:	24 c0       	rjmp	.+72     	; 0x2d7c <LCD_sendChar+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	68 85       	ldd	r22, Y+8	; 0x08
    2d36:	79 85       	ldd	r23, Y+9	; 0x09
    2d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9f 83       	std	Y+7, r25	; 0x07
    2d46:	8e 83       	std	Y+6, r24	; 0x06
    2d48:	8e 81       	ldd	r24, Y+6	; 0x06
    2d4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d4c:	9b 83       	std	Y+3, r25	; 0x03
    2d4e:	8a 83       	std	Y+2, r24	; 0x02
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	9b 81       	ldd	r25, Y+3	; 0x03
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_sendChar+0xc3c>
    2d58:	9b 83       	std	Y+3, r25	; 0x03
    2d5a:	8a 83       	std	Y+2, r24	; 0x02
    2d5c:	0f c0       	rjmp	.+30     	; 0x2d7c <LCD_sendChar+0xc64>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d5e:	69 89       	ldd	r22, Y+17	; 0x11
    2d60:	7a 89       	ldd	r23, Y+18	; 0x12
    2d62:	8b 89       	ldd	r24, Y+19	; 0x13
    2d64:	9c 89       	ldd	r25, Y+20	; 0x14
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	88 8b       	std	Y+16, r24	; 0x10
    2d70:	88 89       	ldd	r24, Y+16	; 0x10
    2d72:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	8a 95       	dec	r24
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <LCD_sendChar+0xc5e>
    2d7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);

#endif

}
    2d7c:	cf 56       	subi	r28, 0x6F	; 111
    2d7e:	df 4f       	sbci	r29, 0xFF	; 255
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	1f 91       	pop	r17
    2d90:	0f 91       	pop	r16
    2d92:	08 95       	ret

00002d94 <LCD_sendString>:


void LCD_sendString(const char *str)
{
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <LCD_sendString+0x6>
    2d9a:	0f 92       	push	r0
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	9b 83       	std	Y+3, r25	; 0x03
    2da2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    2da4:	19 82       	std	Y+1, r1	; 0x01
    2da6:	0e c0       	rjmp	.+28     	; 0x2dc4 <LCD_sendString+0x30>
	while(str[i]!= '\0')
	{
		LCD_sendChar(str[i]);
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	9b 81       	ldd	r25, Y+3	; 0x03
    2db2:	fc 01       	movw	r30, r24
    2db4:	e2 0f       	add	r30, r18
    2db6:	f3 1f       	adc	r31, r19
    2db8:	80 81       	ld	r24, Z
    2dba:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_sendChar>
		i++;
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	8f 5f       	subi	r24, 0xFF	; 255
    2dc2:	89 83       	std	Y+1, r24	; 0x01


void LCD_sendString(const char *str)
{
	uint8 i =0;
	while(str[i]!= '\0')
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dce:	fc 01       	movw	r30, r24
    2dd0:	e2 0f       	add	r30, r18
    2dd2:	f3 1f       	adc	r31, r19
    2dd4:	80 81       	ld	r24, Z
    2dd6:	88 23       	and	r24, r24
    2dd8:	39 f7       	brne	.-50     	; 0x2da8 <LCD_sendString+0x14>
	{
		LCD_sendChar(str[i]);
		i++;
	}
}
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <LCD_Clear>:


void LCD_Clear(void)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR); 
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_sendCommand>
}
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <LCD_IntToStr>:


void LCD_IntToStr(const uint16 data)
{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	62 97       	sbiw	r28, 0x12	; 18
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	9a 8b       	std	Y+18, r25	; 0x12
    2e10:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* 10 for decimal */
    2e12:	89 89       	ldd	r24, Y+17	; 0x11
    2e14:	9a 89       	ldd	r25, Y+18	; 0x12
    2e16:	9e 01       	movw	r18, r28
    2e18:	2f 5f       	subi	r18, 0xFF	; 255
    2e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1c:	b9 01       	movw	r22, r18
    2e1e:	4a e0       	ldi	r20, 0x0A	; 10
    2e20:	50 e0       	ldi	r21, 0x00	; 0
    2e22:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <itoa>
	LCD_sendString(buff);
    2e26:	ce 01       	movw	r24, r28
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
}
    2e2e:	62 96       	adiw	r28, 0x12	; 18
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <LCD_goToRowColumn>:


void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	00 d0       	rcall	.+0      	; 0x2e46 <LCD_goToRowColumn+0x6>
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <LCD_goToRowColumn+0x8>
    2e48:	0f 92       	push	r0
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	8a 83       	std	Y+2, r24	; 0x02
    2e50:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	28 2f       	mov	r18, r24
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	3d 83       	std	Y+5, r19	; 0x05
    2e5a:	2c 83       	std	Y+4, r18	; 0x04
    2e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e60:	81 30       	cpi	r24, 0x01	; 1
    2e62:	91 05       	cpc	r25, r1
    2e64:	c1 f0       	breq	.+48     	; 0x2e96 <LCD_goToRowColumn+0x56>
    2e66:	2c 81       	ldd	r18, Y+4	; 0x04
    2e68:	3d 81       	ldd	r19, Y+5	; 0x05
    2e6a:	22 30       	cpi	r18, 0x02	; 2
    2e6c:	31 05       	cpc	r19, r1
    2e6e:	2c f4       	brge	.+10     	; 0x2e7a <LCD_goToRowColumn+0x3a>
    2e70:	8c 81       	ldd	r24, Y+4	; 0x04
    2e72:	9d 81       	ldd	r25, Y+5	; 0x05
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	61 f0       	breq	.+24     	; 0x2e90 <LCD_goToRowColumn+0x50>
    2e78:	19 c0       	rjmp	.+50     	; 0x2eac <LCD_goToRowColumn+0x6c>
    2e7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2e7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2e7e:	22 30       	cpi	r18, 0x02	; 2
    2e80:	31 05       	cpc	r19, r1
    2e82:	69 f0       	breq	.+26     	; 0x2e9e <LCD_goToRowColumn+0x5e>
    2e84:	8c 81       	ldd	r24, Y+4	; 0x04
    2e86:	9d 81       	ldd	r25, Y+5	; 0x05
    2e88:	83 30       	cpi	r24, 0x03	; 3
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	61 f0       	breq	.+24     	; 0x2ea6 <LCD_goToRowColumn+0x66>
    2e8e:	0e c0       	rjmp	.+28     	; 0x2eac <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address=col;
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	89 83       	std	Y+1, r24	; 0x01
    2e94:	0b c0       	rjmp	.+22     	; 0x2eac <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address=col+0x40;
    2e96:	8b 81       	ldd	r24, Y+3	; 0x03
    2e98:	80 5c       	subi	r24, 0xC0	; 192
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	07 c0       	rjmp	.+14     	; 0x2eac <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address=col+0x10;
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	80 5f       	subi	r24, 0xF0	; 240
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	03 c0       	rjmp	.+6      	; 0x2eac <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address=col+0x50;
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	80 5b       	subi	r24, 0xB0	; 176
    2eaa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	80 68       	ori	r24, 0x80	; 128
    2eb0:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_sendCommand>
}
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *Str)
{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <LCD_displayStringRowColumn+0x6>
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <LCD_displayStringRowColumn+0x8>
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	6a 83       	std	Y+2, r22	; 0x02
    2ed4:	5c 83       	std	Y+4, r21	; 0x04
    2ed6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	6a 81       	ldd	r22, Y+2	; 0x02
    2edc:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
	LCD_sendString(Str); /* display the string */
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
}
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <OS_init>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void OS_init(void)
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	0f 92       	push	r0
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
	uint8 u8_Array_Index;

	global_interrupt_enable();
    2f00:	0e 94 1d 1b 	call	0x363a	; 0x363a <global_interrupt_enable>
	timer0_init();
    2f04:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <timer0_init>
	Set_OCR_Value(OS_TickTIme_ms);
    2f08:	80 91 be 00 	lds	r24, 0x00BE
    2f0c:	0e 94 94 1a 	call	0x3528	; 0x3528 <Set_OCR_Value>
	OS_SetCallBack(OS_Long_Term);
    2f10:	8a eb       	ldi	r24, 0xBA	; 186
    2f12:	99 e1       	ldi	r25, 0x19	; 25
    2f14:	0e 94 80 1b 	call	0x3700	; 0x3700 <OS_SetCallBack>
	for(u8_Array_Index=0;u8_Array_Index<MAX_NUM_TASKS;u8_Array_Index++)
    2f18:	19 82       	std	Y+1, r1	; 0x01
    2f1a:	58 c0       	rjmp	.+176    	; 0x2fcc <OS_init+0xd6>
	{
		Str_Array_Tasks[u8_Array_Index].OS_PTR_Function=NULL;
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	9c 01       	movw	r18, r24
    2f28:	22 0f       	add	r18, r18
    2f2a:	33 1f       	adc	r19, r19
    2f2c:	22 0f       	add	r18, r18
    2f2e:	33 1f       	adc	r19, r19
    2f30:	82 0f       	add	r24, r18
    2f32:	93 1f       	adc	r25, r19
    2f34:	fc 01       	movw	r30, r24
    2f36:	ed 52       	subi	r30, 0x2D	; 45
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	11 82       	std	Z+1, r1	; 0x01
    2f3c:	10 82       	st	Z, r1
		Str_Array_Tasks[u8_Array_Index].Task_Priority=0u;
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	88 2f       	mov	r24, r24
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	88 0f       	add	r24, r24
    2f46:	99 1f       	adc	r25, r25
    2f48:	9c 01       	movw	r18, r24
    2f4a:	22 0f       	add	r18, r18
    2f4c:	33 1f       	adc	r19, r19
    2f4e:	22 0f       	add	r18, r18
    2f50:	33 1f       	adc	r19, r19
    2f52:	82 0f       	add	r24, r18
    2f54:	93 1f       	adc	r25, r19
    2f56:	fc 01       	movw	r30, r24
    2f58:	e8 52       	subi	r30, 0x28	; 40
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	10 82       	st	Z, r1
		Str_Array_Tasks[u8_Array_Index].Task_Periodicity=0u;
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	9c 01       	movw	r18, r24
    2f6a:	22 0f       	add	r18, r18
    2f6c:	33 1f       	adc	r19, r19
    2f6e:	22 0f       	add	r18, r18
    2f70:	33 1f       	adc	r19, r19
    2f72:	82 0f       	add	r24, r18
    2f74:	93 1f       	adc	r25, r19
    2f76:	fc 01       	movw	r30, r24
    2f78:	ea 52       	subi	r30, 0x2A	; 42
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	11 82       	std	Z+1, r1	; 0x01
    2f7e:	10 82       	st	Z, r1
		Str_Array_Tasks[u8_Array_Index].Task_Status=WAITING;
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	28 2f       	mov	r18, r24
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	c9 01       	movw	r24, r18
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	82 0f       	add	r24, r18
    2f92:	93 1f       	adc	r25, r19
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	88 0f       	add	r24, r24
    2f98:	99 1f       	adc	r25, r25
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	ed 52       	subi	r30, 0x2D	; 45
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	82 e0       	ldi	r24, 0x02	; 2
    2fa2:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Array_Index].Task_Start_Time=0u;
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	9c 01       	movw	r18, r24
    2fb0:	22 0f       	add	r18, r18
    2fb2:	33 1f       	adc	r19, r19
    2fb4:	22 0f       	add	r18, r18
    2fb6:	33 1f       	adc	r19, r19
    2fb8:	82 0f       	add	r24, r18
    2fba:	93 1f       	adc	r25, r19
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	e5 52       	subi	r30, 0x25	; 37
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	11 82       	std	Z+1, r1	; 0x01
    2fc4:	10 82       	st	Z, r1

	global_interrupt_enable();
	timer0_init();
	Set_OCR_Value(OS_TickTIme_ms);
	OS_SetCallBack(OS_Long_Term);
	for(u8_Array_Index=0;u8_Array_Index<MAX_NUM_TASKS;u8_Array_Index++)
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	8f 5f       	subi	r24, 0xFF	; 255
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	8a 30       	cpi	r24, 0x0A	; 10
    2fd0:	08 f4       	brcc	.+2      	; 0x2fd4 <OS_init+0xde>
    2fd2:	a4 cf       	rjmp	.-184    	; 0x2f1c <OS_init+0x26>
		Str_Array_Tasks[u8_Array_Index].Task_Periodicity=0u;
		Str_Array_Tasks[u8_Array_Index].Task_Status=WAITING;
		Str_Array_Tasks[u8_Array_Index].Task_Start_Time=0u;

	}
}
    2fd4:	0f 90       	pop	r0
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <Create_Task>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
OS_Status_t Create_Task(OS_PTR_Function OS_PTR_Function,uint8 Task_Priority,uint16 Task_Periodicity,uint16 Task_Temp_Periodicity,uint16 Task_Start_time)
{
    2fdc:	0f 93       	push	r16
    2fde:	1f 93       	push	r17
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	2a 97       	sbiw	r28, 0x0a	; 10
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	9b 83       	std	Y+3, r25	; 0x03
    2ff6:	8a 83       	std	Y+2, r24	; 0x02
    2ff8:	6c 83       	std	Y+4, r22	; 0x04
    2ffa:	5e 83       	std	Y+6, r21	; 0x06
    2ffc:	4d 83       	std	Y+5, r20	; 0x05
    2ffe:	38 87       	std	Y+8, r19	; 0x08
    3000:	2f 83       	std	Y+7, r18	; 0x07
    3002:	1a 87       	std	Y+10, r17	; 0x0a
    3004:	09 87       	std	Y+9, r16	; 0x09
	OS_Status_t Ret_Value;
	/*Check for first Null*/
	if(u8_Tasks_Index<MAX_NUM_TASKS)
    3006:	80 91 c6 00 	lds	r24, 0x00C6
    300a:	8a 30       	cpi	r24, 0x0A	; 10
    300c:	08 f0       	brcs	.+2      	; 0x3010 <Create_Task+0x34>
    300e:	7c c0       	rjmp	.+248    	; 0x3108 <Create_Task+0x12c>
	{
		Str_Array_Tasks[u8_Tasks_Index].OS_PTR_Function = OS_PTR_Function;
    3010:	80 91 c6 00 	lds	r24, 0x00C6
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	9c 01       	movw	r18, r24
    301e:	22 0f       	add	r18, r18
    3020:	33 1f       	adc	r19, r19
    3022:	22 0f       	add	r18, r18
    3024:	33 1f       	adc	r19, r19
    3026:	82 0f       	add	r24, r18
    3028:	93 1f       	adc	r25, r19
    302a:	fc 01       	movw	r30, r24
    302c:	ed 52       	subi	r30, 0x2D	; 45
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	9b 81       	ldd	r25, Y+3	; 0x03
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Priority = Task_Priority;
    3038:	80 91 c6 00 	lds	r24, 0x00C6
    303c:	88 2f       	mov	r24, r24
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	9c 01       	movw	r18, r24
    3046:	22 0f       	add	r18, r18
    3048:	33 1f       	adc	r19, r19
    304a:	22 0f       	add	r18, r18
    304c:	33 1f       	adc	r19, r19
    304e:	82 0f       	add	r24, r18
    3050:	93 1f       	adc	r25, r19
    3052:	fc 01       	movw	r30, r24
    3054:	e8 52       	subi	r30, 0x28	; 40
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	8c 81       	ldd	r24, Y+4	; 0x04
    305a:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Periodicity = Task_Periodicity;
    305c:	80 91 c6 00 	lds	r24, 0x00C6
    3060:	88 2f       	mov	r24, r24
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	88 0f       	add	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	9c 01       	movw	r18, r24
    306a:	22 0f       	add	r18, r18
    306c:	33 1f       	adc	r19, r19
    306e:	22 0f       	add	r18, r18
    3070:	33 1f       	adc	r19, r19
    3072:	82 0f       	add	r24, r18
    3074:	93 1f       	adc	r25, r19
    3076:	fc 01       	movw	r30, r24
    3078:	ea 52       	subi	r30, 0x2A	; 42
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	9e 81       	ldd	r25, Y+6	; 0x06
    3080:	91 83       	std	Z+1, r25	; 0x01
    3082:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Status = WAITING;
    3084:	80 91 c6 00 	lds	r24, 0x00C6
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	c9 01       	movw	r24, r18
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	82 0f       	add	r24, r18
    3098:	93 1f       	adc	r25, r19
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	88 0f       	add	r24, r24
    309e:	99 1f       	adc	r25, r25
    30a0:	fc 01       	movw	r30, r24
    30a2:	ed 52       	subi	r30, 0x2D	; 45
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Temp_Periodicity=Task_Temp_Periodicity;
    30aa:	80 91 c6 00 	lds	r24, 0x00C6
    30ae:	88 2f       	mov	r24, r24
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	9c 01       	movw	r18, r24
    30b8:	22 0f       	add	r18, r18
    30ba:	33 1f       	adc	r19, r19
    30bc:	22 0f       	add	r18, r18
    30be:	33 1f       	adc	r19, r19
    30c0:	82 0f       	add	r24, r18
    30c2:	93 1f       	adc	r25, r19
    30c4:	fc 01       	movw	r30, r24
    30c6:	e7 52       	subi	r30, 0x27	; 39
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	8f 81       	ldd	r24, Y+7	; 0x07
    30cc:	98 85       	ldd	r25, Y+8	; 0x08
    30ce:	91 83       	std	Z+1, r25	; 0x01
    30d0:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Start_Time=Task_Start_time;
    30d2:	80 91 c6 00 	lds	r24, 0x00C6
    30d6:	88 2f       	mov	r24, r24
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	88 0f       	add	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	9c 01       	movw	r18, r24
    30e0:	22 0f       	add	r18, r18
    30e2:	33 1f       	adc	r19, r19
    30e4:	22 0f       	add	r18, r18
    30e6:	33 1f       	adc	r19, r19
    30e8:	82 0f       	add	r24, r18
    30ea:	93 1f       	adc	r25, r19
    30ec:	fc 01       	movw	r30, r24
    30ee:	e5 52       	subi	r30, 0x25	; 37
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	89 85       	ldd	r24, Y+9	; 0x09
    30f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	80 83       	st	Z, r24
		u8_Tasks_Index++;
    30fa:	80 91 c6 00 	lds	r24, 0x00C6
    30fe:	8f 5f       	subi	r24, 0xFF	; 255
    3100:	80 93 c6 00 	sts	0x00C6, r24
		Ret_Value=OS_OK;
    3104:	19 82       	std	Y+1, r1	; 0x01
    3106:	02 c0       	rjmp	.+4      	; 0x310c <Create_Task+0x130>
	}
	else
	{
		Ret_Value=OS_NOT_OK;
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Ret_Value;
    310c:	89 81       	ldd	r24, Y+1	; 0x01
}
    310e:	2a 96       	adiw	r28, 0x0a	; 10
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	1f 91       	pop	r17
    3120:	0f 91       	pop	r16
    3122:	08 95       	ret

00003124 <Delete_Task>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
OS_Status_t Delete_Task(OS_PTR_Function OS_PTR_Function)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	00 d0       	rcall	.+0      	; 0x312a <Delete_Task+0x6>
    312a:	00 d0       	rcall	.+0      	; 0x312c <Delete_Task+0x8>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
	uint8 u8_Array_Index;
	OS_Status_t Ret_Value=OS_NOT_OK;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	89 83       	std	Y+1, r24	; 0x01
	for(u8_Array_Index=0;u8_Array_Index<u8_Tasks_Index;u8_Array_Index++)
    3138:	1a 82       	std	Y+2, r1	; 0x02
    313a:	82 c0       	rjmp	.+260    	; 0x3240 <Delete_Task+0x11c>
	{
		if(Str_Array_Tasks[u8_Array_Index].OS_PTR_Function==OS_PTR_Function)
    313c:	8a 81       	ldd	r24, Y+2	; 0x02
    313e:	88 2f       	mov	r24, r24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	9c 01       	movw	r18, r24
    3148:	22 0f       	add	r18, r18
    314a:	33 1f       	adc	r19, r19
    314c:	22 0f       	add	r18, r18
    314e:	33 1f       	adc	r19, r19
    3150:	82 0f       	add	r24, r18
    3152:	93 1f       	adc	r25, r19
    3154:	fc 01       	movw	r30, r24
    3156:	ed 52       	subi	r30, 0x2D	; 45
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	20 81       	ld	r18, Z
    315c:	31 81       	ldd	r19, Z+1	; 0x01
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	28 17       	cp	r18, r24
    3164:	39 07       	cpc	r19, r25
    3166:	09 f0       	breq	.+2      	; 0x316a <Delete_Task+0x46>
    3168:	68 c0       	rjmp	.+208    	; 0x323a <Delete_Task+0x116>
		{
			Str_Array_Tasks[u8_Array_Index].OS_PTR_Function=NULL;
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	88 2f       	mov	r24, r24
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	88 0f       	add	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	9c 01       	movw	r18, r24
    3176:	22 0f       	add	r18, r18
    3178:	33 1f       	adc	r19, r19
    317a:	22 0f       	add	r18, r18
    317c:	33 1f       	adc	r19, r19
    317e:	82 0f       	add	r24, r18
    3180:	93 1f       	adc	r25, r19
    3182:	fc 01       	movw	r30, r24
    3184:	ed 52       	subi	r30, 0x2D	; 45
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	11 82       	std	Z+1, r1	; 0x01
    318a:	10 82       	st	Z, r1
			Str_Array_Tasks[u8_Array_Index].Task_Priority=0u;
    318c:	8a 81       	ldd	r24, Y+2	; 0x02
    318e:	88 2f       	mov	r24, r24
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	9c 01       	movw	r18, r24
    3198:	22 0f       	add	r18, r18
    319a:	33 1f       	adc	r19, r19
    319c:	22 0f       	add	r18, r18
    319e:	33 1f       	adc	r19, r19
    31a0:	82 0f       	add	r24, r18
    31a2:	93 1f       	adc	r25, r19
    31a4:	fc 01       	movw	r30, r24
    31a6:	e8 52       	subi	r30, 0x28	; 40
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	10 82       	st	Z, r1
			Str_Array_Tasks[u8_Array_Index].Task_Periodicity=0u;
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	88 2f       	mov	r24, r24
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	88 0f       	add	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	9c 01       	movw	r18, r24
    31b8:	22 0f       	add	r18, r18
    31ba:	33 1f       	adc	r19, r19
    31bc:	22 0f       	add	r18, r18
    31be:	33 1f       	adc	r19, r19
    31c0:	82 0f       	add	r24, r18
    31c2:	93 1f       	adc	r25, r19
    31c4:	fc 01       	movw	r30, r24
    31c6:	ea 52       	subi	r30, 0x2A	; 42
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	11 82       	std	Z+1, r1	; 0x01
    31cc:	10 82       	st	Z, r1
			Str_Array_Tasks[u8_Array_Index].Task_Status=DELETED;
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	28 2f       	mov	r18, r24
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	c9 01       	movw	r24, r18
    31d6:	88 0f       	add	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	88 0f       	add	r24, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	82 0f       	add	r24, r18
    31e0:	93 1f       	adc	r25, r19
    31e2:	01 96       	adiw	r24, 0x01	; 1
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	fc 01       	movw	r30, r24
    31ea:	ed 52       	subi	r30, 0x2D	; 45
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	83 e0       	ldi	r24, 0x03	; 3
    31f0:	80 83       	st	Z, r24
			Str_Array_Tasks[u8_Array_Index].Task_Temp_Periodicity=0u;
    31f2:	8a 81       	ldd	r24, Y+2	; 0x02
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	9c 01       	movw	r18, r24
    31fe:	22 0f       	add	r18, r18
    3200:	33 1f       	adc	r19, r19
    3202:	22 0f       	add	r18, r18
    3204:	33 1f       	adc	r19, r19
    3206:	82 0f       	add	r24, r18
    3208:	93 1f       	adc	r25, r19
    320a:	fc 01       	movw	r30, r24
    320c:	e7 52       	subi	r30, 0x27	; 39
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	11 82       	std	Z+1, r1	; 0x01
    3212:	10 82       	st	Z, r1
			Str_Array_Tasks[u8_Tasks_Index].Task_Start_Time=0u;
    3214:	80 91 c6 00 	lds	r24, 0x00C6
    3218:	88 2f       	mov	r24, r24
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	9c 01       	movw	r18, r24
    3222:	22 0f       	add	r18, r18
    3224:	33 1f       	adc	r19, r19
    3226:	22 0f       	add	r18, r18
    3228:	33 1f       	adc	r19, r19
    322a:	82 0f       	add	r24, r18
    322c:	93 1f       	adc	r25, r19
    322e:	fc 01       	movw	r30, r24
    3230:	e5 52       	subi	r30, 0x25	; 37
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	11 82       	std	Z+1, r1	; 0x01
    3236:	10 82       	st	Z, r1

			Ret_Value=OS_OK;
    3238:	19 82       	std	Y+1, r1	; 0x01
 **************************************************************************/
OS_Status_t Delete_Task(OS_PTR_Function OS_PTR_Function)
{
	uint8 u8_Array_Index;
	OS_Status_t Ret_Value=OS_NOT_OK;
	for(u8_Array_Index=0;u8_Array_Index<u8_Tasks_Index;u8_Array_Index++)
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	8f 5f       	subi	r24, 0xFF	; 255
    323e:	8a 83       	std	Y+2, r24	; 0x02
    3240:	90 91 c6 00 	lds	r25, 0x00C6
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	89 17       	cp	r24, r25
    3248:	08 f4       	brcc	.+2      	; 0x324c <Delete_Task+0x128>
    324a:	78 cf       	rjmp	.-272    	; 0x313c <Delete_Task+0x18>
			Str_Array_Tasks[u8_Tasks_Index].Task_Start_Time=0u;

			Ret_Value=OS_OK;
		}
	}
	return Ret_Value;
    324c:	89 81       	ldd	r24, Y+1	; 0x01
}
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <OS_Run>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
extern void OS_Run(void)
{
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	00 d0       	rcall	.+0      	; 0x3262 <OS_Run+0x6>
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
	uint8 u8_Array_Index;
	uint8 u8_Priority_Index;
	while(1)
	{
		for(u8_Array_Index = 0u ; u8_Array_Index < u8_Tasks_Index ; u8_Array_Index++)
    3266:	1a 82       	std	Y+2, r1	; 0x02
    3268:	7e c0       	rjmp	.+252    	; 0x3366 <OS_Run+0x10a>
		{
			// check if the tack is ready.
			if( Str_Array_Tasks[u8_Array_Index].Task_Status == READY)
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	c9 01       	movw	r24, r18
    3272:	88 0f       	add	r24, r24
    3274:	99 1f       	adc	r25, r25
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	82 0f       	add	r24, r18
    327c:	93 1f       	adc	r25, r19
    327e:	01 96       	adiw	r24, 0x01	; 1
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	fc 01       	movw	r30, r24
    3286:	ed 52       	subi	r30, 0x2D	; 45
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	80 81       	ld	r24, Z
    328c:	88 23       	and	r24, r24
    328e:	09 f0       	breq	.+2      	; 0x3292 <OS_Run+0x36>
    3290:	67 c0       	rjmp	.+206    	; 0x3360 <OS_Run+0x104>
			{
				//if this task is ready check is't priority to insure it have the highest priority
				for(u8_Priority_Index = HIGHST_PRIORITY ; u8_Priority_Index <= LOWEST_PRIORITY ; u8_Priority_Index++)
    3292:	19 82       	std	Y+1, r1	; 0x01
    3294:	61 c0       	rjmp	.+194    	; 0x3358 <OS_Run+0xfc>
				{
					//if there is two tasks or more have to be run check its priority and run the highest then the lower
					if( Str_Array_Tasks[u8_Array_Index].Task_Priority == u8_Priority_Index )
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	88 2f       	mov	r24, r24
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	88 0f       	add	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	9c 01       	movw	r18, r24
    32a2:	22 0f       	add	r18, r18
    32a4:	33 1f       	adc	r19, r19
    32a6:	22 0f       	add	r18, r18
    32a8:	33 1f       	adc	r19, r19
    32aa:	82 0f       	add	r24, r18
    32ac:	93 1f       	adc	r25, r19
    32ae:	fc 01       	movw	r30, r24
    32b0:	e8 52       	subi	r30, 0x28	; 40
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	90 81       	ld	r25, Z
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	98 17       	cp	r25, r24
    32ba:	09 f0       	breq	.+2      	; 0x32be <OS_Run+0x62>
    32bc:	4a c0       	rjmp	.+148    	; 0x3352 <OS_Run+0xf6>
					{
						//if the task has highest priority and its time to run change its state to running state
						Str_Array_Tasks[u8_Array_Index].Task_Status = RUNNING;
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	c9 01       	movw	r24, r18
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	82 0f       	add	r24, r18
    32d0:	93 1f       	adc	r25, r19
    32d2:	01 96       	adiw	r24, 0x01	; 1
    32d4:	88 0f       	add	r24, r24
    32d6:	99 1f       	adc	r25, r25
    32d8:	fc 01       	movw	r30, r24
    32da:	ed 52       	subi	r30, 0x2D	; 45
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	80 83       	st	Z, r24
						if(Str_Array_Tasks[u8_Array_Index].Task_Status == RUNNING)
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	28 2f       	mov	r18, r24
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	c9 01       	movw	r24, r18
    32ea:	88 0f       	add	r24, r24
    32ec:	99 1f       	adc	r25, r25
    32ee:	88 0f       	add	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	82 0f       	add	r24, r18
    32f4:	93 1f       	adc	r25, r19
    32f6:	01 96       	adiw	r24, 0x01	; 1
    32f8:	88 0f       	add	r24, r24
    32fa:	99 1f       	adc	r25, r25
    32fc:	fc 01       	movw	r30, r24
    32fe:	ed 52       	subi	r30, 0x2D	; 45
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	80 81       	ld	r24, Z
    3304:	81 30       	cpi	r24, 0x01	; 1
    3306:	99 f4       	brne	.+38     	; 0x332e <OS_Run+0xd2>
						{
							//run task here
							Str_Array_Tasks[u8_Array_Index].OS_PTR_Function();
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	88 2f       	mov	r24, r24
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	88 0f       	add	r24, r24
    3310:	99 1f       	adc	r25, r25
    3312:	9c 01       	movw	r18, r24
    3314:	22 0f       	add	r18, r18
    3316:	33 1f       	adc	r19, r19
    3318:	22 0f       	add	r18, r18
    331a:	33 1f       	adc	r19, r19
    331c:	82 0f       	add	r24, r18
    331e:	93 1f       	adc	r25, r19
    3320:	fc 01       	movw	r30, r24
    3322:	ed 52       	subi	r30, 0x2D	; 45
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	01 90       	ld	r0, Z+
    3328:	f0 81       	ld	r31, Z
    332a:	e0 2d       	mov	r30, r0
    332c:	09 95       	icall
						}
						//change its state to waiting until its time come again
						Str_Array_Tasks[u8_Array_Index].Task_Status = WAITING;
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	28 2f       	mov	r18, r24
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	c9 01       	movw	r24, r18
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	88 0f       	add	r24, r24
    333c:	99 1f       	adc	r25, r25
    333e:	82 0f       	add	r24, r18
    3340:	93 1f       	adc	r25, r19
    3342:	01 96       	adiw	r24, 0x01	; 1
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	fc 01       	movw	r30, r24
    334a:	ed 52       	subi	r30, 0x2D	; 45
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	82 e0       	ldi	r24, 0x02	; 2
    3350:	80 83       	st	Z, r24
		{
			// check if the tack is ready.
			if( Str_Array_Tasks[u8_Array_Index].Task_Status == READY)
			{
				//if this task is ready check is't priority to insure it have the highest priority
				for(u8_Priority_Index = HIGHST_PRIORITY ; u8_Priority_Index <= LOWEST_PRIORITY ; u8_Priority_Index++)
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	8f 5f       	subi	r24, 0xFF	; 255
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	85 30       	cpi	r24, 0x05	; 5
    335c:	08 f4       	brcc	.+2      	; 0x3360 <OS_Run+0x104>
    335e:	9b cf       	rjmp	.-202    	; 0x3296 <OS_Run+0x3a>
{
	uint8 u8_Array_Index;
	uint8 u8_Priority_Index;
	while(1)
	{
		for(u8_Array_Index = 0u ; u8_Array_Index < u8_Tasks_Index ; u8_Array_Index++)
    3360:	8a 81       	ldd	r24, Y+2	; 0x02
    3362:	8f 5f       	subi	r24, 0xFF	; 255
    3364:	8a 83       	std	Y+2, r24	; 0x02
    3366:	90 91 c6 00 	lds	r25, 0x00C6
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	89 17       	cp	r24, r25
    336e:	08 f4       	brcc	.+2      	; 0x3372 <OS_Run+0x116>
    3370:	7c cf       	rjmp	.-264    	; 0x326a <OS_Run+0xe>
    3372:	79 cf       	rjmp	.-270    	; 0x3266 <OS_Run+0xa>

00003374 <OS_Long_Term>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void OS_Long_Term(void)
{
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	0f 92       	push	r0
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
	uint8 u8_Array_Index;
	for(u8_Array_Index = 0u ;u8_Array_Index < u8_Tasks_Index ; u8_Array_Index++)
    337e:	19 82       	std	Y+1, r1	; 0x01
    3380:	69 c0       	rjmp	.+210    	; 0x3454 <OS_Long_Term+0xe0>
	{
		if( Str_Array_Tasks[u8_Array_Index].Task_Temp_Periodicity == OS_TickCounter )
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	88 2f       	mov	r24, r24
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	88 0f       	add	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	9c 01       	movw	r18, r24
    338e:	22 0f       	add	r18, r18
    3390:	33 1f       	adc	r19, r19
    3392:	22 0f       	add	r18, r18
    3394:	33 1f       	adc	r19, r19
    3396:	82 0f       	add	r24, r18
    3398:	93 1f       	adc	r25, r19
    339a:	fc 01       	movw	r30, r24
    339c:	e7 52       	subi	r30, 0x27	; 39
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	20 81       	ld	r18, Z
    33a2:	31 81       	ldd	r19, Z+1	; 0x01
    33a4:	80 91 c7 00 	lds	r24, 0x00C7
    33a8:	90 91 c8 00 	lds	r25, 0x00C8
    33ac:	28 17       	cp	r18, r24
    33ae:	39 07       	cpc	r19, r25
    33b0:	e1 f5       	brne	.+120    	; 0x342a <OS_Long_Term+0xb6>
		{
			Str_Array_Tasks[u8_Array_Index].Task_Temp_Periodicity = Str_Array_Tasks[u8_Array_Index].Task_Periodicity + OS_TickCounter ;
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	68 2f       	mov	r22, r24
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	88 2f       	mov	r24, r24
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	88 0f       	add	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	9c 01       	movw	r18, r24
    33c4:	22 0f       	add	r18, r18
    33c6:	33 1f       	adc	r19, r19
    33c8:	22 0f       	add	r18, r18
    33ca:	33 1f       	adc	r19, r19
    33cc:	82 0f       	add	r24, r18
    33ce:	93 1f       	adc	r25, r19
    33d0:	fc 01       	movw	r30, r24
    33d2:	ea 52       	subi	r30, 0x2A	; 42
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	20 81       	ld	r18, Z
    33d8:	31 81       	ldd	r19, Z+1	; 0x01
    33da:	80 91 c7 00 	lds	r24, 0x00C7
    33de:	90 91 c8 00 	lds	r25, 0x00C8
    33e2:	a9 01       	movw	r20, r18
    33e4:	48 0f       	add	r20, r24
    33e6:	59 1f       	adc	r21, r25
    33e8:	cb 01       	movw	r24, r22
    33ea:	88 0f       	add	r24, r24
    33ec:	99 1f       	adc	r25, r25
    33ee:	9c 01       	movw	r18, r24
    33f0:	22 0f       	add	r18, r18
    33f2:	33 1f       	adc	r19, r19
    33f4:	22 0f       	add	r18, r18
    33f6:	33 1f       	adc	r19, r19
    33f8:	82 0f       	add	r24, r18
    33fa:	93 1f       	adc	r25, r19
    33fc:	fc 01       	movw	r30, r24
    33fe:	e7 52       	subi	r30, 0x27	; 39
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	51 83       	std	Z+1, r21	; 0x01
    3404:	40 83       	st	Z, r20
			Str_Array_Tasks[u8_Array_Index].Task_Status = READY;
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	28 2f       	mov	r18, r24
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	c9 01       	movw	r24, r18
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	82 0f       	add	r24, r18
    3418:	93 1f       	adc	r25, r19
    341a:	01 96       	adiw	r24, 0x01	; 1
    341c:	88 0f       	add	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	fc 01       	movw	r30, r24
    3422:	ed 52       	subi	r30, 0x2D	; 45
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	10 82       	st	Z, r1
    3428:	12 c0       	rjmp	.+36     	; 0x344e <OS_Long_Term+0xda>
		}
		else
		{
			Str_Array_Tasks[u8_Array_Index].Task_Status = WAITING;
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	28 2f       	mov	r18, r24
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	c9 01       	movw	r24, r18
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	82 0f       	add	r24, r18
    343c:	93 1f       	adc	r25, r19
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	88 0f       	add	r24, r24
    3442:	99 1f       	adc	r25, r25
    3444:	fc 01       	movw	r30, r24
    3446:	ed 52       	subi	r30, 0x2D	; 45
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	80 83       	st	Z, r24
 * Return		 : void
 **************************************************************************/
void OS_Long_Term(void)
{
	uint8 u8_Array_Index;
	for(u8_Array_Index = 0u ;u8_Array_Index < u8_Tasks_Index ; u8_Array_Index++)
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	8f 5f       	subi	r24, 0xFF	; 255
    3452:	89 83       	std	Y+1, r24	; 0x01
    3454:	90 91 c6 00 	lds	r25, 0x00C6
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	89 17       	cp	r24, r25
    345c:	08 f4       	brcc	.+2      	; 0x3460 <OS_Long_Term+0xec>
    345e:	91 cf       	rjmp	.-222    	; 0x3382 <OS_Long_Term+0xe>
		{
			Str_Array_Tasks[u8_Array_Index].Task_Status = WAITING;
		}

	}
	OS_TickCounter++;
    3460:	80 91 c7 00 	lds	r24, 0x00C7
    3464:	90 91 c8 00 	lds	r25, 0x00C8
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	90 93 c8 00 	sts	0x00C8, r25
    346e:	80 93 c7 00 	sts	0x00C7, r24
}
    3472:	0f 90       	pop	r0
    3474:	cf 91       	pop	r28
    3476:	df 91       	pop	r29
    3478:	08 95       	ret

0000347a <OS_Deinit>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void OS_Deinit(void)
{
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
	timer0_Deinit();
    3482:	0e 94 01 1b 	call	0x3602	; 0x3602 <timer0_Deinit>
}
    3486:	cf 91       	pop	r28
    3488:	df 91       	pop	r29
    348a:	08 95       	ret

0000348c <__vector_10>:

//struct Timer0_config init={N_256,CTC_Normal};
static void (*OS_CallBackPtr_g)(void) = NULL;

ISR(TIMER0_COMP_vect)
{
    348c:	1f 92       	push	r1
    348e:	0f 92       	push	r0
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	0f 92       	push	r0
    3494:	11 24       	eor	r1, r1
    3496:	2f 93       	push	r18
    3498:	3f 93       	push	r19
    349a:	4f 93       	push	r20
    349c:	5f 93       	push	r21
    349e:	6f 93       	push	r22
    34a0:	7f 93       	push	r23
    34a2:	8f 93       	push	r24
    34a4:	9f 93       	push	r25
    34a6:	af 93       	push	r26
    34a8:	bf 93       	push	r27
    34aa:	ef 93       	push	r30
    34ac:	ff 93       	push	r31
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
	if(OS_CallBackPtr_g != NULL)
    34b6:	80 91 c9 00 	lds	r24, 0x00C9
    34ba:	90 91 ca 00 	lds	r25, 0x00CA
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	29 f0       	breq	.+10     	; 0x34cc <__vector_10+0x40>
	{
		OS_CallBackPtr_g();
    34c2:	e0 91 c9 00 	lds	r30, 0x00C9
    34c6:	f0 91 ca 00 	lds	r31, 0x00CA
    34ca:	09 95       	icall
	}
}
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	ff 91       	pop	r31
    34d2:	ef 91       	pop	r30
    34d4:	bf 91       	pop	r27
    34d6:	af 91       	pop	r26
    34d8:	9f 91       	pop	r25
    34da:	8f 91       	pop	r24
    34dc:	7f 91       	pop	r23
    34de:	6f 91       	pop	r22
    34e0:	5f 91       	pop	r21
    34e2:	4f 91       	pop	r20
    34e4:	3f 91       	pop	r19
    34e6:	2f 91       	pop	r18
    34e8:	0f 90       	pop	r0
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	0f 90       	pop	r0
    34ee:	1f 90       	pop	r1
    34f0:	18 95       	reti

000034f2 <timer0_init>:
void timer0_init(void)
{
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    34fa:	e3 e5       	ldi	r30, 0x53	; 83
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	10 82       	st	Z, r1
	TCNT0=0;
    3500:	e2 e5       	ldi	r30, 0x52	; 82
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	10 82       	st	Z, r1
	//TCCR0|=(T0_config->PRE_SCALER)|(T0_config->Wave_generation_mode);
	Set_Bit(TIMSK,OCIE0);
    3506:	a9 e5       	ldi	r26, 0x59	; 89
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	e9 e5       	ldi	r30, 0x59	; 89
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	82 60       	ori	r24, 0x02	; 2
    3512:	8c 93       	st	X, r24
	TCCR0|=(N_256)|(CTC_Normal);
    3514:	a3 e5       	ldi	r26, 0x53	; 83
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	e3 e5       	ldi	r30, 0x53	; 83
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	8c 60       	ori	r24, 0x0C	; 12
    3520:	8c 93       	st	X, r24
}
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	08 95       	ret

00003528 <Set_OCR_Value>:
void Set_OCR_Value(uint8 Tick_Time_ms)
{
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	00 d0       	rcall	.+0      	; 0x352e <Set_OCR_Value+0x6>
    352e:	0f 92       	push	r0
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	89 83       	std	Y+1, r24	; 0x01
	switch(Tick_Time_ms)
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	28 2f       	mov	r18, r24
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	3b 83       	std	Y+3, r19	; 0x03
    353e:	2a 83       	std	Y+2, r18	; 0x02
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	9b 81       	ldd	r25, Y+3	; 0x03
    3544:	84 30       	cpi	r24, 0x04	; 4
    3546:	91 05       	cpc	r25, r1
    3548:	c9 f1       	breq	.+114    	; 0x35bc <Set_OCR_Value+0x94>
    354a:	2a 81       	ldd	r18, Y+2	; 0x02
    354c:	3b 81       	ldd	r19, Y+3	; 0x03
    354e:	25 30       	cpi	r18, 0x05	; 5
    3550:	31 05       	cpc	r19, r1
    3552:	84 f4       	brge	.+32     	; 0x3574 <Set_OCR_Value+0x4c>
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	9b 81       	ldd	r25, Y+3	; 0x03
    3558:	82 30       	cpi	r24, 0x02	; 2
    355a:	91 05       	cpc	r25, r1
    355c:	29 f1       	breq	.+74     	; 0x35a8 <Set_OCR_Value+0x80>
    355e:	2a 81       	ldd	r18, Y+2	; 0x02
    3560:	3b 81       	ldd	r19, Y+3	; 0x03
    3562:	23 30       	cpi	r18, 0x03	; 3
    3564:	31 05       	cpc	r19, r1
    3566:	2c f5       	brge	.+74     	; 0x35b2 <Set_OCR_Value+0x8a>
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	9b 81       	ldd	r25, Y+3	; 0x03
    356c:	81 30       	cpi	r24, 0x01	; 1
    356e:	91 05       	cpc	r25, r1
    3570:	b1 f0       	breq	.+44     	; 0x359e <Set_OCR_Value+0x76>
    3572:	3d c0       	rjmp	.+122    	; 0x35ee <Set_OCR_Value+0xc6>
    3574:	2a 81       	ldd	r18, Y+2	; 0x02
    3576:	3b 81       	ldd	r19, Y+3	; 0x03
    3578:	26 30       	cpi	r18, 0x06	; 6
    357a:	31 05       	cpc	r19, r1
    357c:	49 f1       	breq	.+82     	; 0x35d0 <Set_OCR_Value+0xa8>
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	9b 81       	ldd	r25, Y+3	; 0x03
    3582:	86 30       	cpi	r24, 0x06	; 6
    3584:	91 05       	cpc	r25, r1
    3586:	fc f0       	brlt	.+62     	; 0x35c6 <Set_OCR_Value+0x9e>
    3588:	2a 81       	ldd	r18, Y+2	; 0x02
    358a:	3b 81       	ldd	r19, Y+3	; 0x03
    358c:	27 30       	cpi	r18, 0x07	; 7
    358e:	31 05       	cpc	r19, r1
    3590:	21 f1       	breq	.+72     	; 0x35da <Set_OCR_Value+0xb2>
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	9b 81       	ldd	r25, Y+3	; 0x03
    3596:	88 30       	cpi	r24, 0x08	; 8
    3598:	91 05       	cpc	r25, r1
    359a:	21 f1       	breq	.+72     	; 0x35e4 <Set_OCR_Value+0xbc>
    359c:	28 c0       	rjmp	.+80     	; 0x35ee <Set_OCR_Value+0xc6>
	{
	case 1u:
		OCR0=31u;
    359e:	ec e5       	ldi	r30, 0x5C	; 92
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	8f e1       	ldi	r24, 0x1F	; 31
    35a4:	80 83       	st	Z, r24
    35a6:	27 c0       	rjmp	.+78     	; 0x35f6 <Set_OCR_Value+0xce>
		break;
	case 2u:
		OCR0=62u;
    35a8:	ec e5       	ldi	r30, 0x5C	; 92
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	8e e3       	ldi	r24, 0x3E	; 62
    35ae:	80 83       	st	Z, r24
    35b0:	22 c0       	rjmp	.+68     	; 0x35f6 <Set_OCR_Value+0xce>
		break;
	case 3u:
		OCR0=94u;
    35b2:	ec e5       	ldi	r30, 0x5C	; 92
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	8e e5       	ldi	r24, 0x5E	; 94
    35b8:	80 83       	st	Z, r24
    35ba:	1d c0       	rjmp	.+58     	; 0x35f6 <Set_OCR_Value+0xce>
		break;
	case 4u:
		OCR0=125u;
    35bc:	ec e5       	ldi	r30, 0x5C	; 92
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	8d e7       	ldi	r24, 0x7D	; 125
    35c2:	80 83       	st	Z, r24
    35c4:	18 c0       	rjmp	.+48     	; 0x35f6 <Set_OCR_Value+0xce>
		break;
	case 5u:
		OCR0=156u;
    35c6:	ec e5       	ldi	r30, 0x5C	; 92
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	8c e9       	ldi	r24, 0x9C	; 156
    35cc:	80 83       	st	Z, r24
    35ce:	13 c0       	rjmp	.+38     	; 0x35f6 <Set_OCR_Value+0xce>
		break;
	case 6u:
		OCR0=187u;
    35d0:	ec e5       	ldi	r30, 0x5C	; 92
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	8b eb       	ldi	r24, 0xBB	; 187
    35d6:	80 83       	st	Z, r24
    35d8:	0e c0       	rjmp	.+28     	; 0x35f6 <Set_OCR_Value+0xce>
		break;
	case 7u:
		OCR0=219u;
    35da:	ec e5       	ldi	r30, 0x5C	; 92
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	8b ed       	ldi	r24, 0xDB	; 219
    35e0:	80 83       	st	Z, r24
    35e2:	09 c0       	rjmp	.+18     	; 0x35f6 <Set_OCR_Value+0xce>
		break;
	case 8u:
		OCR0=250u;
    35e4:	ec e5       	ldi	r30, 0x5C	; 92
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	8a ef       	ldi	r24, 0xFA	; 250
    35ea:	80 83       	st	Z, r24
    35ec:	04 c0       	rjmp	.+8      	; 0x35f6 <Set_OCR_Value+0xce>
		break;
	default :
		OCR0=250u;
    35ee:	ec e5       	ldi	r30, 0x5C	; 92
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	8a ef       	ldi	r24, 0xFA	; 250
    35f4:	80 83       	st	Z, r24
		break;
	}
}
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	cf 91       	pop	r28
    35fe:	df 91       	pop	r29
    3600:	08 95       	ret

00003602 <timer0_Deinit>:
void timer0_Deinit(void)
{
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(TCCR0,CS00);
    360a:	a3 e5       	ldi	r26, 0x53	; 83
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	e3 e5       	ldi	r30, 0x53	; 83
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	8e 7f       	andi	r24, 0xFE	; 254
    3616:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,CS01);
    3618:	a3 e5       	ldi	r26, 0x53	; 83
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	e3 e5       	ldi	r30, 0x53	; 83
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	8d 7f       	andi	r24, 0xFD	; 253
    3624:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,CS02);
    3626:	a3 e5       	ldi	r26, 0x53	; 83
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	e3 e5       	ldi	r30, 0x53	; 83
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	80 81       	ld	r24, Z
    3630:	8b 7f       	andi	r24, 0xFB	; 251
    3632:	8c 93       	st	X, r24
}
    3634:	cf 91       	pop	r28
    3636:	df 91       	pop	r29
    3638:	08 95       	ret

0000363a <global_interrupt_enable>:
void global_interrupt_enable(void)
{
    363a:	df 93       	push	r29
    363c:	cf 93       	push	r28
    363e:	cd b7       	in	r28, 0x3d	; 61
    3640:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,I);
    3642:	af e5       	ldi	r26, 0x5F	; 95
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	ef e5       	ldi	r30, 0x5F	; 95
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	80 68       	ori	r24, 0x80	; 128
    364e:	8c 93       	st	X, r24
}
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	08 95       	ret

00003656 <global_interrupt_disable>:
void global_interrupt_disable(void)
{
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,I);
    365e:	af e5       	ldi	r26, 0x5F	; 95
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	ef e5       	ldi	r30, 0x5F	; 95
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	8f 77       	andi	r24, 0x7F	; 127
    366a:	8c 93       	st	X, r24
}
    366c:	cf 91       	pop	r28
    366e:	df 91       	pop	r29
    3670:	08 95       	ret

00003672 <timer_delay>:
void timer_delay(uint32 delay)
{
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	28 97       	sbiw	r28, 0x08	; 8
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	6d 83       	std	Y+5, r22	; 0x05
    3688:	7e 83       	std	Y+6, r23	; 0x06
    368a:	8f 83       	std	Y+7, r24	; 0x07
    368c:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	TCNT0=0;
    368e:	e2 e5       	ldi	r30, 0x52	; 82
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	10 82       	st	Z, r1
	for(i=0;i<(delay);i++)
    3694:	19 82       	std	Y+1, r1	; 0x01
    3696:	1a 82       	std	Y+2, r1	; 0x02
    3698:	1b 82       	std	Y+3, r1	; 0x03
    369a:	1c 82       	std	Y+4, r1	; 0x04
    369c:	1b c0       	rjmp	.+54     	; 0x36d4 <timer_delay+0x62>
	{
		while(!(TIFR&(1<<OCF0)));
    369e:	e8 e5       	ldi	r30, 0x58	; 88
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	80 81       	ld	r24, Z
    36a4:	88 2f       	mov	r24, r24
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	82 70       	andi	r24, 0x02	; 2
    36aa:	90 70       	andi	r25, 0x00	; 0
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	b9 f3       	breq	.-18     	; 0x369e <timer_delay+0x2c>
		Set_Bit(TIFR,OCF0);
    36b0:	a8 e5       	ldi	r26, 0x58	; 88
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	e8 e5       	ldi	r30, 0x58	; 88
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	82 60       	ori	r24, 0x02	; 2
    36bc:	8c 93       	st	X, r24
}
void timer_delay(uint32 delay)
{
	uint32 i;
	TCNT0=0;
	for(i=0;i<(delay);i++)
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
    36c2:	ab 81       	ldd	r26, Y+3	; 0x03
    36c4:	bc 81       	ldd	r27, Y+4	; 0x04
    36c6:	01 96       	adiw	r24, 0x01	; 1
    36c8:	a1 1d       	adc	r26, r1
    36ca:	b1 1d       	adc	r27, r1
    36cc:	89 83       	std	Y+1, r24	; 0x01
    36ce:	9a 83       	std	Y+2, r25	; 0x02
    36d0:	ab 83       	std	Y+3, r26	; 0x03
    36d2:	bc 83       	std	Y+4, r27	; 0x04
    36d4:	29 81       	ldd	r18, Y+1	; 0x01
    36d6:	3a 81       	ldd	r19, Y+2	; 0x02
    36d8:	4b 81       	ldd	r20, Y+3	; 0x03
    36da:	5c 81       	ldd	r21, Y+4	; 0x04
    36dc:	8d 81       	ldd	r24, Y+5	; 0x05
    36de:	9e 81       	ldd	r25, Y+6	; 0x06
    36e0:	af 81       	ldd	r26, Y+7	; 0x07
    36e2:	b8 85       	ldd	r27, Y+8	; 0x08
    36e4:	28 17       	cp	r18, r24
    36e6:	39 07       	cpc	r19, r25
    36e8:	4a 07       	cpc	r20, r26
    36ea:	5b 07       	cpc	r21, r27
    36ec:	c0 f2       	brcs	.-80     	; 0x369e <timer_delay+0x2c>
	{
		while(!(TIFR&(1<<OCF0)));
		Set_Bit(TIFR,OCF0);
	}
}
    36ee:	28 96       	adiw	r28, 0x08	; 8
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <OS_SetCallBack>:
void OS_SetCallBack(void(*a_ptr)(void))
{
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	00 d0       	rcall	.+0      	; 0x3706 <OS_SetCallBack+0x6>
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
	OS_CallBackPtr_g=a_ptr;
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	9a 81       	ldd	r25, Y+2	; 0x02
    3712:	90 93 ca 00 	sts	0x00CA, r25
    3716:	80 93 c9 00 	sts	0x00C9, r24
}
    371a:	0f 90       	pop	r0
    371c:	0f 90       	pop	r0
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <KeyPad_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_PORT_DIR = (0b11100000u);
    372c:	e4 e3       	ldi	r30, 0x34	; 52
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	80 ee       	ldi	r24, 0xE0	; 224
    3732:	80 83       	st	Z, r24
	KEYPAD_PORT_OUT = (~(0b11100000u));
    3734:	e5 e3       	ldi	r30, 0x35	; 53
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	8f e1       	ldi	r24, 0x1F	; 31
    373a:	80 83       	st	Z, r24
}
    373c:	cf 91       	pop	r28
    373e:	df 91       	pop	r29
    3740:	08 95       	ret

00003742 <KeyPad_getPressedKey>:



uint8 KeyPad_getPressedKey(void)
{
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	0f 92       	push	r0
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
	for(col=0;col<N_col;col++) /* loop for columns */
    374c:	10 92 38 01 	sts	0x0138, r1
    3750:	5a c0       	rjmp	.+180    	; 0x3806 <KeyPad_getPressedKey+0xc4>
	{
		/*
		 * each time only one of the column pins will be output and
		 * the rest will be input pins include the row pins
		 */
		KEYPAD_PORT_DIR = (0b00100000<<col);
    3752:	e4 e3       	ldi	r30, 0x34	; 52
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	80 91 38 01 	lds	r24, 0x0138
    375a:	28 2f       	mov	r18, r24
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	80 e2       	ldi	r24, 0x20	; 32
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	02 c0       	rjmp	.+4      	; 0x3768 <KeyPad_getPressedKey+0x26>
    3764:	88 0f       	add	r24, r24
    3766:	99 1f       	adc	r25, r25
    3768:	2a 95       	dec	r18
    376a:	e2 f7       	brpl	.-8      	; 0x3764 <KeyPad_getPressedKey+0x22>
    376c:	80 83       	st	Z, r24

		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(0b00100000<<col));
    376e:	e5 e3       	ldi	r30, 0x35	; 53
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 91 38 01 	lds	r24, 0x0138
    3776:	28 2f       	mov	r18, r24
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	80 e2       	ldi	r24, 0x20	; 32
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	02 2e       	mov	r0, r18
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <KeyPad_getPressedKey+0x44>
    3782:	88 0f       	add	r24, r24
    3784:	99 1f       	adc	r25, r25
    3786:	0a 94       	dec	r0
    3788:	e2 f7       	brpl	.-8      	; 0x3782 <KeyPad_getPressedKey+0x40>
    378a:	80 95       	com	r24
    378c:	80 83       	st	Z, r24
		for(row=2;row<5;row++) /* loop for rows */
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	80 93 39 01 	sts	0x0139, r24
    3794:	2f c0       	rjmp	.+94     	; 0x37f4 <KeyPad_getPressedKey+0xb2>
		{
			if(Get_Bit(KEYPAD_PORT_IN,row)==0) /* if the switch is press in this row */
    3796:	e3 e3       	ldi	r30, 0x33	; 51
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	28 2f       	mov	r18, r24
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	80 91 39 01 	lds	r24, 0x0139
    37a4:	88 2f       	mov	r24, r24
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	a9 01       	movw	r20, r18
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <KeyPad_getPressedKey+0x6e>
    37ac:	55 95       	asr	r21
    37ae:	47 95       	ror	r20
    37b0:	8a 95       	dec	r24
    37b2:	e2 f7       	brpl	.-8      	; 0x37ac <KeyPad_getPressedKey+0x6a>
    37b4:	ca 01       	movw	r24, r20
    37b6:	81 70       	andi	r24, 0x01	; 1
    37b8:	90 70       	andi	r25, 0x00	; 0
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	b1 f4       	brne	.+44     	; 0x37ea <KeyPad_getPressedKey+0xa8>
			{
				DIO_WritePin(PinB6,HIGH);
    37be:	8e e0       	ldi	r24, 0x0E	; 14
    37c0:	61 e0       	ldi	r22, 0x01	; 1
    37c2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
#if (N_col == 3 && N_row == 4)
				return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
#elif (N_col == 4 && N_row == 4)
				return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
#elif (N_col == 3 && N_row == 3)
				return KeyPad_3x3_adjustKeyNumber(3*(row-2)+col+1);
    37c6:	80 91 39 01 	lds	r24, 0x0139
    37ca:	28 2f       	mov	r18, r24
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	c9 01       	movw	r24, r18
    37d0:	88 0f       	add	r24, r24
    37d2:	99 1f       	adc	r25, r25
    37d4:	82 0f       	add	r24, r18
    37d6:	93 1f       	adc	r25, r19
    37d8:	98 2f       	mov	r25, r24
    37da:	80 91 38 01 	lds	r24, 0x0138
    37de:	89 0f       	add	r24, r25
    37e0:	85 50       	subi	r24, 0x05	; 5
    37e2:	0e 94 0f 1c 	call	0x381e	; 0x381e <KeyPad_3x3_adjustKeyNumber>
    37e6:	89 83       	std	Y+1, r24	; 0x01
    37e8:	15 c0       	rjmp	.+42     	; 0x3814 <KeyPad_getPressedKey+0xd2>
		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(0b00100000<<col));
		for(row=2;row<5;row++) /* loop for rows */
    37ea:	80 91 39 01 	lds	r24, 0x0139
    37ee:	8f 5f       	subi	r24, 0xFF	; 255
    37f0:	80 93 39 01 	sts	0x0139, r24
    37f4:	80 91 39 01 	lds	r24, 0x0139
    37f8:	85 30       	cpi	r24, 0x05	; 5
    37fa:	68 f2       	brcs	.-102    	; 0x3796 <KeyPad_getPressedKey+0x54>



uint8 KeyPad_getPressedKey(void)
{
	for(col=0;col<N_col;col++) /* loop for columns */
    37fc:	80 91 38 01 	lds	r24, 0x0138
    3800:	8f 5f       	subi	r24, 0xFF	; 255
    3802:	80 93 38 01 	sts	0x0138, r24
    3806:	80 91 38 01 	lds	r24, 0x0138
    380a:	83 30       	cpi	r24, 0x03	; 3
    380c:	08 f4       	brcc	.+2      	; 0x3810 <KeyPad_getPressedKey+0xce>
    380e:	a1 cf       	rjmp	.-190    	; 0x3752 <KeyPad_getPressedKey+0x10>
				return KeyPad_3x3_adjustKeyNumber(3*(row-2)+col+1);
#endif
			}
		}
	}
	return 'a';
    3810:	51 e6       	ldi	r21, 0x61	; 97
    3812:	59 83       	std	Y+1, r21	; 0x01
    3814:	89 81       	ldd	r24, Y+1	; 0x01
}
    3816:	0f 90       	pop	r0
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	08 95       	ret

0000381e <KeyPad_3x3_adjustKeyNumber>:
	}
}
#elif (N_row == 3 && N_col == 3)

static uint8 KeyPad_3x3_adjustKeyNumber(uint8 button_number)
{
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	00 d0       	rcall	.+0      	; 0x3824 <KeyPad_3x3_adjustKeyNumber+0x6>
    3824:	00 d0       	rcall	.+0      	; 0x3826 <KeyPad_3x3_adjustKeyNumber+0x8>
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    382c:	89 81       	ldd	r24, Y+1	; 0x01
    382e:	28 2f       	mov	r18, r24
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	3c 83       	std	Y+4, r19	; 0x04
    3834:	2b 83       	std	Y+3, r18	; 0x03
    3836:	8b 81       	ldd	r24, Y+3	; 0x03
    3838:	9c 81       	ldd	r25, Y+4	; 0x04
    383a:	85 30       	cpi	r24, 0x05	; 5
    383c:	91 05       	cpc	r25, r1
    383e:	09 f4       	brne	.+2      	; 0x3842 <KeyPad_3x3_adjustKeyNumber+0x24>
    3840:	41 c0       	rjmp	.+130    	; 0x38c4 <KeyPad_3x3_adjustKeyNumber+0xa6>
    3842:	2b 81       	ldd	r18, Y+3	; 0x03
    3844:	3c 81       	ldd	r19, Y+4	; 0x04
    3846:	26 30       	cpi	r18, 0x06	; 6
    3848:	31 05       	cpc	r19, r1
    384a:	dc f4       	brge	.+54     	; 0x3882 <KeyPad_3x3_adjustKeyNumber+0x64>
    384c:	8b 81       	ldd	r24, Y+3	; 0x03
    384e:	9c 81       	ldd	r25, Y+4	; 0x04
    3850:	82 30       	cpi	r24, 0x02	; 2
    3852:	91 05       	cpc	r25, r1
    3854:	71 f1       	breq	.+92     	; 0x38b2 <KeyPad_3x3_adjustKeyNumber+0x94>
    3856:	2b 81       	ldd	r18, Y+3	; 0x03
    3858:	3c 81       	ldd	r19, Y+4	; 0x04
    385a:	23 30       	cpi	r18, 0x03	; 3
    385c:	31 05       	cpc	r19, r1
    385e:	34 f4       	brge	.+12     	; 0x386c <KeyPad_3x3_adjustKeyNumber+0x4e>
    3860:	8b 81       	ldd	r24, Y+3	; 0x03
    3862:	9c 81       	ldd	r25, Y+4	; 0x04
    3864:	81 30       	cpi	r24, 0x01	; 1
    3866:	91 05       	cpc	r25, r1
    3868:	09 f1       	breq	.+66     	; 0x38ac <KeyPad_3x3_adjustKeyNumber+0x8e>
    386a:	3b c0       	rjmp	.+118    	; 0x38e2 <KeyPad_3x3_adjustKeyNumber+0xc4>
    386c:	2b 81       	ldd	r18, Y+3	; 0x03
    386e:	3c 81       	ldd	r19, Y+4	; 0x04
    3870:	23 30       	cpi	r18, 0x03	; 3
    3872:	31 05       	cpc	r19, r1
    3874:	09 f1       	breq	.+66     	; 0x38b8 <KeyPad_3x3_adjustKeyNumber+0x9a>
    3876:	8b 81       	ldd	r24, Y+3	; 0x03
    3878:	9c 81       	ldd	r25, Y+4	; 0x04
    387a:	84 30       	cpi	r24, 0x04	; 4
    387c:	91 05       	cpc	r25, r1
    387e:	f9 f0       	breq	.+62     	; 0x38be <KeyPad_3x3_adjustKeyNumber+0xa0>
    3880:	30 c0       	rjmp	.+96     	; 0x38e2 <KeyPad_3x3_adjustKeyNumber+0xc4>
    3882:	2b 81       	ldd	r18, Y+3	; 0x03
    3884:	3c 81       	ldd	r19, Y+4	; 0x04
    3886:	27 30       	cpi	r18, 0x07	; 7
    3888:	31 05       	cpc	r19, r1
    388a:	11 f1       	breq	.+68     	; 0x38d0 <KeyPad_3x3_adjustKeyNumber+0xb2>
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	9c 81       	ldd	r25, Y+4	; 0x04
    3890:	87 30       	cpi	r24, 0x07	; 7
    3892:	91 05       	cpc	r25, r1
    3894:	d4 f0       	brlt	.+52     	; 0x38ca <KeyPad_3x3_adjustKeyNumber+0xac>
    3896:	2b 81       	ldd	r18, Y+3	; 0x03
    3898:	3c 81       	ldd	r19, Y+4	; 0x04
    389a:	28 30       	cpi	r18, 0x08	; 8
    389c:	31 05       	cpc	r19, r1
    389e:	d9 f0       	breq	.+54     	; 0x38d6 <KeyPad_3x3_adjustKeyNumber+0xb8>
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	9c 81       	ldd	r25, Y+4	; 0x04
    38a4:	89 30       	cpi	r24, 0x09	; 9
    38a6:	91 05       	cpc	r25, r1
    38a8:	c9 f0       	breq	.+50     	; 0x38dc <KeyPad_3x3_adjustKeyNumber+0xbe>
    38aa:	1b c0       	rjmp	.+54     	; 0x38e2 <KeyPad_3x3_adjustKeyNumber+0xc4>
	{
	case 1: return 1;
    38ac:	91 e0       	ldi	r25, 0x01	; 1
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	1a c0       	rjmp	.+52     	; 0x38e6 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 2: return 2;
    38b2:	22 e0       	ldi	r18, 0x02	; 2
    38b4:	2a 83       	std	Y+2, r18	; 0x02
    38b6:	17 c0       	rjmp	.+46     	; 0x38e6 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 3: return 3;
    38b8:	33 e0       	ldi	r19, 0x03	; 3
    38ba:	3a 83       	std	Y+2, r19	; 0x02
    38bc:	14 c0       	rjmp	.+40     	; 0x38e6 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 4: return 4; // ASCII Code of %
    38be:	84 e0       	ldi	r24, 0x04	; 4
    38c0:	8a 83       	std	Y+2, r24	; 0x02
    38c2:	11 c0       	rjmp	.+34     	; 0x38e6 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 5: return 5;
    38c4:	95 e0       	ldi	r25, 0x05	; 5
    38c6:	9a 83       	std	Y+2, r25	; 0x02
    38c8:	0e c0       	rjmp	.+28     	; 0x38e6 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 6: return 6;
    38ca:	26 e0       	ldi	r18, 0x06	; 6
    38cc:	2a 83       	std	Y+2, r18	; 0x02
    38ce:	0b c0       	rjmp	.+22     	; 0x38e6 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 7: return 7;
    38d0:	37 e0       	ldi	r19, 0x07	; 7
    38d2:	3a 83       	std	Y+2, r19	; 0x02
    38d4:	08 c0       	rjmp	.+16     	; 0x38e6 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 8: return 8; /* ASCII Code of '*' */
    38d6:	88 e0       	ldi	r24, 0x08	; 8
    38d8:	8a 83       	std	Y+2, r24	; 0x02
    38da:	05 c0       	rjmp	.+10     	; 0x38e6 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 9: return 9;
    38dc:	99 e0       	ldi	r25, 0x09	; 9
    38de:	9a 83       	std	Y+2, r25	; 0x02
    38e0:	02 c0       	rjmp	.+4      	; 0x38e6 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	default: return button_number;
    38e2:	29 81       	ldd	r18, Y+1	; 0x01
    38e4:	2a 83       	std	Y+2, r18	; 0x02
    38e6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	08 95       	ret

000038f6 <main>:

/**************************************************************************
 * 				            main Function							      *
 *************************************************************************/
int main(void)
{
    38f6:	0f 93       	push	r16
    38f8:	1f 93       	push	r17
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
	/**************************************************************************
	 * 				            Pin Defining							      *
	 *************************************************************************/
	DIO_SetPinDirection(PinB4,HIGH);
    3902:	8c e0       	ldi	r24, 0x0C	; 12
    3904:	61 e0       	ldi	r22, 0x01	; 1
    3906:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_SetPinDirection>
	DIO_SetPinDirection(PinB5,HIGH);
    390a:	8d e0       	ldi	r24, 0x0D	; 13
    390c:	61 e0       	ldi	r22, 0x01	; 1
    390e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_SetPinDirection>
	DIO_SetPinDirection(PinB6,HIGH);
    3912:	8e e0       	ldi	r24, 0x0E	; 14
    3914:	61 e0       	ldi	r22, 0x01	; 1
    3916:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_SetPinDirection>
	DIO_SetPinDirection(PinB2,INPUT);
    391a:	8a e0       	ldi	r24, 0x0A	; 10
    391c:	60 e0       	ldi	r22, 0x00	; 0
    391e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_SetPinDirection>
	DIO_WritePin(PinB4,LOW);
    3922:	8c e0       	ldi	r24, 0x0C	; 12
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(PinB5,LOW);
    392a:	8d e0       	ldi	r24, 0x0D	; 13
    392c:	60 e0       	ldi	r22, 0x00	; 0
    392e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(PinB6,LOW);
    3932:	8e e0       	ldi	r24, 0x0E	; 14
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	/**************************************************************************
	 * 				               Start OS								      *
	 *************************************************************************/

	LCD_INIT();
    393a:	0e 94 23 0a 	call	0x1446	; 0x1446 <LCD_INIT>
	KeyPad_init();
    393e:	0e 94 92 1b 	call	0x3724	; 0x3724 <KeyPad_init>
	OS_init();
    3942:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <OS_init>

	Create_Task(KeyPad_Task,SECOND_LVL_PRIORITY,1u,1u,0u);
    3946:	87 e1       	ldi	r24, 0x17	; 23
    3948:	9e e1       	ldi	r25, 0x1E	; 30
    394a:	61 e0       	ldi	r22, 0x01	; 1
    394c:	41 e0       	ldi	r20, 0x01	; 1
    394e:	50 e0       	ldi	r21, 0x00	; 0
    3950:	21 e0       	ldi	r18, 0x01	; 1
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	00 e0       	ldi	r16, 0x00	; 0
    3956:	10 e0       	ldi	r17, 0x00	; 0
    3958:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <Create_Task>
	Create_Task(Imfotainment,HIGHST_PRIORITY,1500U,1500U,0U);
    395c:	80 ed       	ldi	r24, 0xD0	; 208
    395e:	9c e1       	ldi	r25, 0x1C	; 28
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	4c ed       	ldi	r20, 0xDC	; 220
    3964:	55 e0       	ldi	r21, 0x05	; 5
    3966:	2c ed       	ldi	r18, 0xDC	; 220
    3968:	35 e0       	ldi	r19, 0x05	; 5
    396a:	00 e0       	ldi	r16, 0x00	; 0
    396c:	10 e0       	ldi	r17, 0x00	; 0
    396e:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <Create_Task>
	OS_Run();
    3972:	0e 94 2e 19 	call	0x325c	; 0x325c <OS_Run>
	return 0;
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	90 e0       	ldi	r25, 0x00	; 0
	/**************************************************************************
	 * 				         Main function end							      *
	 *************************************************************************/
}
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	1f 91       	pop	r17
    3980:	0f 91       	pop	r16
    3982:	08 95       	ret

00003984 <Task1>:
/**************************************************************************
 * 				            set of tasks							      *
 *************************************************************************/
void Task1(void)
{
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
}
    398c:	cf 91       	pop	r28
    398e:	df 91       	pop	r29
    3990:	08 95       	ret

00003992 <Task2>:
void Task2(void)
{
    3992:	df 93       	push	r29
    3994:	cf 93       	push	r28
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62

}
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	08 95       	ret

000039a0 <Imfotainment>:
void Imfotainment(void)
{
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <Imfotainment+0x6>
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    39aa:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_Clear>
	switch(Infotainment_state_g)
    39ae:	80 91 cc 00 	lds	r24, 0x00CC
    39b2:	28 2f       	mov	r18, r24
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	3a 83       	std	Y+2, r19	; 0x02
    39b8:	29 83       	std	Y+1, r18	; 0x01
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	9a 81       	ldd	r25, Y+2	; 0x02
    39be:	82 30       	cpi	r24, 0x02	; 2
    39c0:	91 05       	cpc	r25, r1
    39c2:	09 f4       	brne	.+2      	; 0x39c6 <Imfotainment+0x26>
    39c4:	7d c0       	rjmp	.+250    	; 0x3ac0 <Imfotainment+0x120>
    39c6:	29 81       	ldd	r18, Y+1	; 0x01
    39c8:	3a 81       	ldd	r19, Y+2	; 0x02
    39ca:	23 30       	cpi	r18, 0x03	; 3
    39cc:	31 05       	cpc	r19, r1
    39ce:	54 f4       	brge	.+20     	; 0x39e4 <Imfotainment+0x44>
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	00 97       	sbiw	r24, 0x00	; 0
    39d6:	c9 f0       	breq	.+50     	; 0x3a0a <Imfotainment+0x6a>
    39d8:	29 81       	ldd	r18, Y+1	; 0x01
    39da:	3a 81       	ldd	r19, Y+2	; 0x02
    39dc:	21 30       	cpi	r18, 0x01	; 1
    39de:	31 05       	cpc	r19, r1
    39e0:	c1 f1       	breq	.+112    	; 0x3a52 <Imfotainment+0xb2>
    39e2:	20 c1       	rjmp	.+576    	; 0x3c24 <Imfotainment+0x284>
    39e4:	89 81       	ldd	r24, Y+1	; 0x01
    39e6:	9a 81       	ldd	r25, Y+2	; 0x02
    39e8:	84 30       	cpi	r24, 0x04	; 4
    39ea:	91 05       	cpc	r25, r1
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <Imfotainment+0x50>
    39ee:	da c0       	rjmp	.+436    	; 0x3ba4 <Imfotainment+0x204>
    39f0:	29 81       	ldd	r18, Y+1	; 0x01
    39f2:	3a 81       	ldd	r19, Y+2	; 0x02
    39f4:	24 30       	cpi	r18, 0x04	; 4
    39f6:	31 05       	cpc	r19, r1
    39f8:	0c f4       	brge	.+2      	; 0x39fc <Imfotainment+0x5c>
    39fa:	99 c0       	rjmp	.+306    	; 0x3b2e <Imfotainment+0x18e>
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3a00:	86 30       	cpi	r24, 0x06	; 6
    3a02:	91 05       	cpc	r25, r1
    3a04:	09 f4       	brne	.+2      	; 0x3a08 <Imfotainment+0x68>
    3a06:	fb c0       	rjmp	.+502    	; 0x3bfe <Imfotainment+0x25e>
    3a08:	0d c1       	rjmp	.+538    	; 0x3c24 <Imfotainment+0x284>
	{
	case Infotainment_IDEAL:
		LCD_goToRowColumn(0,0);
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	60 e0       	ldi	r22, 0x00	; 0
    3a0e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
		LCD_sendString("Hello Idiot");
    3a12:	80 e6       	ldi	r24, 0x60	; 96
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
		LCD_goToRowColumn(1,0);
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	60 e0       	ldi	r22, 0x00	; 0
    3a1e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
		LCD_sendString("To cont press 5");
    3a22:	8c e6       	ldi	r24, 0x6C	; 108
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
		LCD_goToRowColumn(0,13);
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	6d e0       	ldi	r22, 0x0D	; 13
    3a2e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
		LCD_sendChar(keypressed+'0');
    3a32:	80 91 d0 00 	lds	r24, 0x00D0
    3a36:	80 5d       	subi	r24, 0xD0	; 208
    3a38:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_sendChar>
		if(keypressed==5)
    3a3c:	80 91 d0 00 	lds	r24, 0x00D0
    3a40:	85 30       	cpi	r24, 0x05	; 5
    3a42:	09 f0       	breq	.+2      	; 0x3a46 <Imfotainment+0xa6>
    3a44:	ef c0       	rjmp	.+478    	; 0x3c24 <Imfotainment+0x284>
		{
			Infotainment_state_g=Infotainment_Q1;
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	80 93 cc 00 	sts	0x00CC, r24
			keypressed=0;
    3a4c:	10 92 d0 00 	sts	0x00D0, r1
    3a50:	e9 c0       	rjmp	.+466    	; 0x3c24 <Imfotainment+0x284>
		}
		break;

	case Infotainment_Q1:
		LCD_goToRowColumn(0,0);
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	60 e0       	ldi	r22, 0x00	; 0
    3a56:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
		LCD_sendString("r u crazy?");
    3a5a:	8c e7       	ldi	r24, 0x7C	; 124
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
		LCD_goToRowColumn(1,0);
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	60 e0       	ldi	r22, 0x00	; 0
    3a66:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
		LCD_sendString("4-yes   6-no");
    3a6a:	87 e8       	ldi	r24, 0x87	; 135
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
		LCD_goToRowColumn(0,13);
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	6d e0       	ldi	r22, 0x0D	; 13
    3a76:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
		LCD_sendChar(keypressed+'0');
    3a7a:	80 91 d0 00 	lds	r24, 0x00D0
    3a7e:	80 5d       	subi	r24, 0xD0	; 208
    3a80:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_sendChar>
		if(keypressed==4)
    3a84:	80 91 d0 00 	lds	r24, 0x00D0
    3a88:	84 30       	cpi	r24, 0x04	; 4
    3a8a:	51 f4       	brne	.+20     	; 0x3aa0 <Imfotainment+0x100>
		{
			Infotainment_Result_Counter++;
    3a8c:	80 91 cd 00 	lds	r24, 0x00CD
    3a90:	8f 5f       	subi	r24, 0xFF	; 255
    3a92:	80 93 cd 00 	sts	0x00CD, r24
			Infotainment_state_g=Infotainment_Q2;
    3a96:	82 e0       	ldi	r24, 0x02	; 2
    3a98:	80 93 cc 00 	sts	0x00CC, r24
			keypressed=0;
    3a9c:	10 92 d0 00 	sts	0x00D0, r1
		}
		if(keypressed==6)
    3aa0:	80 91 d0 00 	lds	r24, 0x00D0
    3aa4:	86 30       	cpi	r24, 0x06	; 6
    3aa6:	09 f0       	breq	.+2      	; 0x3aaa <Imfotainment+0x10a>
    3aa8:	bd c0       	rjmp	.+378    	; 0x3c24 <Imfotainment+0x284>
		{
			Infotainment_Result_Counter--;
    3aaa:	80 91 cd 00 	lds	r24, 0x00CD
    3aae:	81 50       	subi	r24, 0x01	; 1
    3ab0:	80 93 cd 00 	sts	0x00CD, r24
			Infotainment_state_g=Infotainment_Q2;
    3ab4:	82 e0       	ldi	r24, 0x02	; 2
    3ab6:	80 93 cc 00 	sts	0x00CC, r24
			keypressed=0;
    3aba:	10 92 d0 00 	sts	0x00D0, r1
    3abe:	b2 c0       	rjmp	.+356    	; 0x3c24 <Imfotainment+0x284>
		}

		break;
	case Infotainment_Q2:
			LCD_goToRowColumn(0,0);
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	60 e0       	ldi	r22, 0x00	; 0
    3ac4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
			LCD_sendString("r u one?");
    3ac8:	84 e9       	ldi	r24, 0x94	; 148
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
			LCD_goToRowColumn(1,0);
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
			LCD_sendString("4-yes   6-no");
    3ad8:	87 e8       	ldi	r24, 0x87	; 135
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
			LCD_goToRowColumn(0,13);
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	6d e0       	ldi	r22, 0x0D	; 13
    3ae4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
			LCD_sendChar(keypressed+'0');
    3ae8:	80 91 d0 00 	lds	r24, 0x00D0
    3aec:	80 5d       	subi	r24, 0xD0	; 208
    3aee:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_sendChar>
			if(keypressed==4)
    3af2:	80 91 d0 00 	lds	r24, 0x00D0
    3af6:	84 30       	cpi	r24, 0x04	; 4
    3af8:	51 f4       	brne	.+20     	; 0x3b0e <Imfotainment+0x16e>
			{
				Infotainment_Result_Counter++;
    3afa:	80 91 cd 00 	lds	r24, 0x00CD
    3afe:	8f 5f       	subi	r24, 0xFF	; 255
    3b00:	80 93 cd 00 	sts	0x00CD, r24
				Infotainment_state_g=Infotainment_Q3;
    3b04:	83 e0       	ldi	r24, 0x03	; 3
    3b06:	80 93 cc 00 	sts	0x00CC, r24
				keypressed=0;
    3b0a:	10 92 d0 00 	sts	0x00D0, r1
			}
			if(keypressed==6)
    3b0e:	80 91 d0 00 	lds	r24, 0x00D0
    3b12:	86 30       	cpi	r24, 0x06	; 6
    3b14:	09 f0       	breq	.+2      	; 0x3b18 <Imfotainment+0x178>
    3b16:	86 c0       	rjmp	.+268    	; 0x3c24 <Imfotainment+0x284>
			{
				Infotainment_Result_Counter--;
    3b18:	80 91 cd 00 	lds	r24, 0x00CD
    3b1c:	81 50       	subi	r24, 0x01	; 1
    3b1e:	80 93 cd 00 	sts	0x00CD, r24
				Infotainment_state_g=Infotainment_Q3;
    3b22:	83 e0       	ldi	r24, 0x03	; 3
    3b24:	80 93 cc 00 	sts	0x00CC, r24
				keypressed=0;
    3b28:	10 92 d0 00 	sts	0x00D0, r1
    3b2c:	7b c0       	rjmp	.+246    	; 0x3c24 <Imfotainment+0x284>
			}
			break;
	case Infotainment_Q3:
				LCD_goToRowColumn(0,0);
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	60 e0       	ldi	r22, 0x00	; 0
    3b32:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
				LCD_sendString("r u two?");
    3b36:	8d e9       	ldi	r24, 0x9D	; 157
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
				LCD_goToRowColumn(1,0);
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
				LCD_sendString("4-yes   6-no");
    3b46:	87 e8       	ldi	r24, 0x87	; 135
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
				LCD_goToRowColumn(0,13);
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	6d e0       	ldi	r22, 0x0D	; 13
    3b52:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
				LCD_sendChar(keypressed+'0');
    3b56:	80 91 d0 00 	lds	r24, 0x00D0
    3b5a:	80 5d       	subi	r24, 0xD0	; 208
    3b5c:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_sendChar>
				if(keypressed==4)
    3b60:	80 91 d0 00 	lds	r24, 0x00D0
    3b64:	84 30       	cpi	r24, 0x04	; 4
    3b66:	71 f4       	brne	.+28     	; 0x3b84 <Imfotainment+0x1e4>
				{
					DIO_WritePin(PinB5,HIGH);
    3b68:	8d e0       	ldi	r24, 0x0D	; 13
    3b6a:	61 e0       	ldi	r22, 0x01	; 1
    3b6c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
					Infotainment_Result_Counter++;
    3b70:	80 91 cd 00 	lds	r24, 0x00CD
    3b74:	8f 5f       	subi	r24, 0xFF	; 255
    3b76:	80 93 cd 00 	sts	0x00CD, r24
					Infotainment_state_g = Infotainment_Q4;
    3b7a:	84 e0       	ldi	r24, 0x04	; 4
    3b7c:	80 93 cc 00 	sts	0x00CC, r24
					keypressed=0;
    3b80:	10 92 d0 00 	sts	0x00D0, r1
				}
				if(keypressed==6)
    3b84:	80 91 d0 00 	lds	r24, 0x00D0
    3b88:	86 30       	cpi	r24, 0x06	; 6
    3b8a:	09 f0       	breq	.+2      	; 0x3b8e <Imfotainment+0x1ee>
    3b8c:	4b c0       	rjmp	.+150    	; 0x3c24 <Imfotainment+0x284>
				{
					Infotainment_Result_Counter--;
    3b8e:	80 91 cd 00 	lds	r24, 0x00CD
    3b92:	81 50       	subi	r24, 0x01	; 1
    3b94:	80 93 cd 00 	sts	0x00CD, r24
					Infotainment_state_g=Infotainment_Q4;
    3b98:	84 e0       	ldi	r24, 0x04	; 4
    3b9a:	80 93 cc 00 	sts	0x00CC, r24
					keypressed=0;
    3b9e:	10 92 d0 00 	sts	0x00D0, r1
    3ba2:	40 c0       	rjmp	.+128    	; 0x3c24 <Imfotainment+0x284>
				}
				break;
	case Infotainment_Q4:
				LCD_goToRowColumn(0,0);
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	60 e0       	ldi	r22, 0x00	; 0
    3ba8:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
				LCD_sendString("r u three?");
    3bac:	86 ea       	ldi	r24, 0xA6	; 166
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
				LCD_goToRowColumn(1,0);
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	60 e0       	ldi	r22, 0x00	; 0
    3bb8:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
				LCD_sendString("4-yes   6-no");
    3bbc:	87 e8       	ldi	r24, 0x87	; 135
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
				if(keypressed==4)
    3bc4:	80 91 d0 00 	lds	r24, 0x00D0
    3bc8:	84 30       	cpi	r24, 0x04	; 4
    3bca:	51 f4       	brne	.+20     	; 0x3be0 <Imfotainment+0x240>
				{
					Infotainment_Result_Counter++;
    3bcc:	80 91 cd 00 	lds	r24, 0x00CD
    3bd0:	8f 5f       	subi	r24, 0xFF	; 255
    3bd2:	80 93 cd 00 	sts	0x00CD, r24
					Infotainment_state_g=Infotainment_Result;
    3bd6:	86 e0       	ldi	r24, 0x06	; 6
    3bd8:	80 93 cc 00 	sts	0x00CC, r24
					keypressed=0;
    3bdc:	10 92 d0 00 	sts	0x00D0, r1
				}
				if(keypressed==6)
    3be0:	80 91 d0 00 	lds	r24, 0x00D0
    3be4:	86 30       	cpi	r24, 0x06	; 6
    3be6:	f1 f4       	brne	.+60     	; 0x3c24 <Imfotainment+0x284>
				{
					Infotainment_Result_Counter--;
    3be8:	80 91 cd 00 	lds	r24, 0x00CD
    3bec:	81 50       	subi	r24, 0x01	; 1
    3bee:	80 93 cd 00 	sts	0x00CD, r24
					Infotainment_state_g=Infotainment_Result;
    3bf2:	86 e0       	ldi	r24, 0x06	; 6
    3bf4:	80 93 cc 00 	sts	0x00CC, r24
					keypressed=0;
    3bf8:	10 92 d0 00 	sts	0x00D0, r1
    3bfc:	13 c0       	rjmp	.+38     	; 0x3c24 <Imfotainment+0x284>
				}
				break;
	case Infotainment_Result:
				LCD_goToRowColumn(0,0);
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	60 e0       	ldi	r22, 0x00	; 0
    3c02:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
				LCD_sendString("res=");
    3c06:	81 eb       	ldi	r24, 0xB1	; 177
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_sendString>
				LCD_goToRowColumn(1,0);
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	60 e0       	ldi	r22, 0x00	; 0
    3c12:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_goToRowColumn>
				LCD_sendChar(Infotainment_Result_Counter+'0');
    3c16:	80 91 cd 00 	lds	r24, 0x00CD
    3c1a:	80 5d       	subi	r24, 0xD0	; 208
    3c1c:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_sendChar>
				Infotainment_state_g=Infotainment_IDEAL;
    3c20:	10 92 cc 00 	sts	0x00CC, r1

				break;
	}
}
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	08 95       	ret

00003c2e <KeyPad_Task>:
void KeyPad_Task(void)
{
    3c2e:	df 93       	push	r29
    3c30:	cf 93       	push	r28
    3c32:	00 d0       	rcall	.+0      	; 0x3c34 <KeyPad_Task+0x6>
    3c34:	cd b7       	in	r28, 0x3d	; 61
    3c36:	de b7       	in	r29, 0x3e	; 62
	cur=prev;
    3c38:	80 91 d2 00 	lds	r24, 0x00D2
    3c3c:	80 93 d1 00 	sts	0x00D1, r24
	prev=KeyPad_getPressedKey();
    3c40:	0e 94 a1 1b 	call	0x3742	; 0x3742 <KeyPad_getPressedKey>
    3c44:	80 93 d2 00 	sts	0x00D2, r24
	switch(KeyPad_state_g)
    3c48:	80 91 bf 00 	lds	r24, 0x00BF
    3c4c:	28 2f       	mov	r18, r24
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	3a 83       	std	Y+2, r19	; 0x02
    3c52:	29 83       	std	Y+1, r18	; 0x01
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	9a 81       	ldd	r25, Y+2	; 0x02
    3c58:	81 30       	cpi	r24, 0x01	; 1
    3c5a:	91 05       	cpc	r25, r1
    3c5c:	d9 f1       	breq	.+118    	; 0x3cd4 <KeyPad_Task+0xa6>
    3c5e:	29 81       	ldd	r18, Y+1	; 0x01
    3c60:	3a 81       	ldd	r19, Y+2	; 0x02
    3c62:	22 30       	cpi	r18, 0x02	; 2
    3c64:	31 05       	cpc	r19, r1
    3c66:	29 f0       	breq	.+10     	; 0x3c72 <KeyPad_Task+0x44>
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	a9 f0       	breq	.+42     	; 0x3c9a <KeyPad_Task+0x6c>
    3c70:	34 c0       	rjmp	.+104    	; 0x3cda <KeyPad_Task+0xac>
	{
	case KeyPad_IDEAL:

		if(prev != 'a')
    3c72:	80 91 d2 00 	lds	r24, 0x00D2
    3c76:	81 36       	cpi	r24, 0x61	; 97
    3c78:	81 f1       	breq	.+96     	; 0x3cda <KeyPad_Task+0xac>
		{
			count++;
    3c7a:	80 91 ce 00 	lds	r24, 0x00CE
    3c7e:	8f 5f       	subi	r24, 0xFF	; 255
    3c80:	80 93 ce 00 	sts	0x00CE, r24
			if(count==10)
    3c84:	80 91 ce 00 	lds	r24, 0x00CE
    3c88:	8a 30       	cpi	r24, 0x0A	; 10
    3c8a:	19 f4       	brne	.+6      	; 0x3c92 <KeyPad_Task+0x64>
			{
				KeyPad_state_g=PRESSED;
    3c8c:	10 92 bf 00 	sts	0x00BF, r1
    3c90:	24 c0       	rjmp	.+72     	; 0x3cda <KeyPad_Task+0xac>
			}
			else
			{
				KeyPad_state_g=RELEASD;
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	80 93 bf 00 	sts	0x00BF, r24
    3c98:	20 c0       	rjmp	.+64     	; 0x3cda <KeyPad_Task+0xac>
			}
		}
		break;
	case PRESSED:
		if(cur!=prev && prev != 'a')
    3c9a:	90 91 d1 00 	lds	r25, 0x00D1
    3c9e:	80 91 d2 00 	lds	r24, 0x00D2
    3ca2:	98 17       	cp	r25, r24
    3ca4:	81 f0       	breq	.+32     	; 0x3cc6 <KeyPad_Task+0x98>
    3ca6:	80 91 d2 00 	lds	r24, 0x00D2
    3caa:	81 36       	cpi	r24, 0x61	; 97
    3cac:	61 f0       	breq	.+24     	; 0x3cc6 <KeyPad_Task+0x98>
		{
			keypressed=KeyPad_getPressedKey();
    3cae:	0e 94 a1 1b 	call	0x3742	; 0x3742 <KeyPad_getPressedKey>
    3cb2:	80 93 d0 00 	sts	0x00D0, r24
			cur=prev;
    3cb6:	80 91 d2 00 	lds	r24, 0x00D2
    3cba:	80 93 d1 00 	sts	0x00D1, r24
			KeyPad_state_g= RELEASD;
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	80 93 bf 00 	sts	0x00BF, r24
    3cc4:	04 c0       	rjmp	.+8      	; 0x3cce <KeyPad_Task+0xa0>
		}
		else
		{
			DIO_WritePin(PinB6,LOW);
    3cc6:	8e e0       	ldi	r24, 0x0E	; 14
    3cc8:	60 e0       	ldi	r22, 0x00	; 0
    3cca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
		}
		count=0;
    3cce:	10 92 ce 00 	sts	0x00CE, r1
    3cd2:	03 c0       	rjmp	.+6      	; 0x3cda <KeyPad_Task+0xac>
		break;

	case RELEASD:
		KeyPad_state_g =KeyPad_IDEAL;
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	80 93 bf 00 	sts	0x00BF, r24
		break;
	}
}
    3cda:	0f 90       	pop	r0
    3cdc:	0f 90       	pop	r0
    3cde:	cf 91       	pop	r28
    3ce0:	df 91       	pop	r29
    3ce2:	08 95       	ret

00003ce4 <__udivmodqi4>:
    3ce4:	99 1b       	sub	r25, r25
    3ce6:	79 e0       	ldi	r23, 0x09	; 9
    3ce8:	04 c0       	rjmp	.+8      	; 0x3cf2 <__udivmodqi4_ep>

00003cea <__udivmodqi4_loop>:
    3cea:	99 1f       	adc	r25, r25
    3cec:	96 17       	cp	r25, r22
    3cee:	08 f0       	brcs	.+2      	; 0x3cf2 <__udivmodqi4_ep>
    3cf0:	96 1b       	sub	r25, r22

00003cf2 <__udivmodqi4_ep>:
    3cf2:	88 1f       	adc	r24, r24
    3cf4:	7a 95       	dec	r23
    3cf6:	c9 f7       	brne	.-14     	; 0x3cea <__udivmodqi4_loop>
    3cf8:	80 95       	com	r24
    3cfa:	08 95       	ret

00003cfc <__prologue_saves__>:
    3cfc:	2f 92       	push	r2
    3cfe:	3f 92       	push	r3
    3d00:	4f 92       	push	r4
    3d02:	5f 92       	push	r5
    3d04:	6f 92       	push	r6
    3d06:	7f 92       	push	r7
    3d08:	8f 92       	push	r8
    3d0a:	9f 92       	push	r9
    3d0c:	af 92       	push	r10
    3d0e:	bf 92       	push	r11
    3d10:	cf 92       	push	r12
    3d12:	df 92       	push	r13
    3d14:	ef 92       	push	r14
    3d16:	ff 92       	push	r15
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	ca 1b       	sub	r28, r26
    3d26:	db 0b       	sbc	r29, r27
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	f8 94       	cli
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	0f be       	out	0x3f, r0	; 63
    3d30:	cd bf       	out	0x3d, r28	; 61
    3d32:	09 94       	ijmp

00003d34 <__epilogue_restores__>:
    3d34:	2a 88       	ldd	r2, Y+18	; 0x12
    3d36:	39 88       	ldd	r3, Y+17	; 0x11
    3d38:	48 88       	ldd	r4, Y+16	; 0x10
    3d3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d40:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d42:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d44:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d46:	b9 84       	ldd	r11, Y+9	; 0x09
    3d48:	c8 84       	ldd	r12, Y+8	; 0x08
    3d4a:	df 80       	ldd	r13, Y+7	; 0x07
    3d4c:	ee 80       	ldd	r14, Y+6	; 0x06
    3d4e:	fd 80       	ldd	r15, Y+5	; 0x05
    3d50:	0c 81       	ldd	r16, Y+4	; 0x04
    3d52:	1b 81       	ldd	r17, Y+3	; 0x03
    3d54:	aa 81       	ldd	r26, Y+2	; 0x02
    3d56:	b9 81       	ldd	r27, Y+1	; 0x01
    3d58:	ce 0f       	add	r28, r30
    3d5a:	d1 1d       	adc	r29, r1
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	de bf       	out	0x3e, r29	; 62
    3d62:	0f be       	out	0x3f, r0	; 63
    3d64:	cd bf       	out	0x3d, r28	; 61
    3d66:	ed 01       	movw	r28, r26
    3d68:	08 95       	ret

00003d6a <itoa>:
    3d6a:	fb 01       	movw	r30, r22
    3d6c:	9f 01       	movw	r18, r30
    3d6e:	e8 94       	clt
    3d70:	42 30       	cpi	r20, 0x02	; 2
    3d72:	c4 f0       	brlt	.+48     	; 0x3da4 <itoa+0x3a>
    3d74:	45 32       	cpi	r20, 0x25	; 37
    3d76:	b4 f4       	brge	.+44     	; 0x3da4 <itoa+0x3a>
    3d78:	4a 30       	cpi	r20, 0x0A	; 10
    3d7a:	29 f4       	brne	.+10     	; 0x3d86 <itoa+0x1c>
    3d7c:	97 fb       	bst	r25, 7
    3d7e:	1e f4       	brtc	.+6      	; 0x3d86 <itoa+0x1c>
    3d80:	90 95       	com	r25
    3d82:	81 95       	neg	r24
    3d84:	9f 4f       	sbci	r25, 0xFF	; 255
    3d86:	64 2f       	mov	r22, r20
    3d88:	77 27       	eor	r23, r23
    3d8a:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__udivmodhi4>
    3d8e:	80 5d       	subi	r24, 0xD0	; 208
    3d90:	8a 33       	cpi	r24, 0x3A	; 58
    3d92:	0c f0       	brlt	.+2      	; 0x3d96 <itoa+0x2c>
    3d94:	89 5d       	subi	r24, 0xD9	; 217
    3d96:	81 93       	st	Z+, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	00 97       	sbiw	r24, 0x00	; 0
    3d9c:	a1 f7       	brne	.-24     	; 0x3d86 <itoa+0x1c>
    3d9e:	16 f4       	brtc	.+4      	; 0x3da4 <itoa+0x3a>
    3da0:	5d e2       	ldi	r21, 0x2D	; 45
    3da2:	51 93       	st	Z+, r21
    3da4:	10 82       	st	Z, r1
    3da6:	c9 01       	movw	r24, r18
    3da8:	0c 94 d6 1e 	jmp	0x3dac	; 0x3dac <strrev>

00003dac <strrev>:
    3dac:	dc 01       	movw	r26, r24
    3dae:	fc 01       	movw	r30, r24
    3db0:	67 2f       	mov	r22, r23
    3db2:	71 91       	ld	r23, Z+
    3db4:	77 23       	and	r23, r23
    3db6:	e1 f7       	brne	.-8      	; 0x3db0 <strrev+0x4>
    3db8:	32 97       	sbiw	r30, 0x02	; 2
    3dba:	04 c0       	rjmp	.+8      	; 0x3dc4 <strrev+0x18>
    3dbc:	7c 91       	ld	r23, X
    3dbe:	6d 93       	st	X+, r22
    3dc0:	70 83       	st	Z, r23
    3dc2:	62 91       	ld	r22, -Z
    3dc4:	ae 17       	cp	r26, r30
    3dc6:	bf 07       	cpc	r27, r31
    3dc8:	c8 f3       	brcs	.-14     	; 0x3dbc <strrev+0x10>
    3dca:	08 95       	ret

00003dcc <__udivmodhi4>:
    3dcc:	aa 1b       	sub	r26, r26
    3dce:	bb 1b       	sub	r27, r27
    3dd0:	51 e1       	ldi	r21, 0x11	; 17
    3dd2:	07 c0       	rjmp	.+14     	; 0x3de2 <__udivmodhi4_ep>

00003dd4 <__udivmodhi4_loop>:
    3dd4:	aa 1f       	adc	r26, r26
    3dd6:	bb 1f       	adc	r27, r27
    3dd8:	a6 17       	cp	r26, r22
    3dda:	b7 07       	cpc	r27, r23
    3ddc:	10 f0       	brcs	.+4      	; 0x3de2 <__udivmodhi4_ep>
    3dde:	a6 1b       	sub	r26, r22
    3de0:	b7 0b       	sbc	r27, r23

00003de2 <__udivmodhi4_ep>:
    3de2:	88 1f       	adc	r24, r24
    3de4:	99 1f       	adc	r25, r25
    3de6:	5a 95       	dec	r21
    3de8:	a9 f7       	brne	.-22     	; 0x3dd4 <__udivmodhi4_loop>
    3dea:	80 95       	com	r24
    3dec:	90 95       	com	r25
    3dee:	bc 01       	movw	r22, r24
    3df0:	cd 01       	movw	r24, r26
    3df2:	08 95       	ret

00003df4 <_exit>:
    3df4:	f8 94       	cli

00003df6 <__stop_program>:
    3df6:	ff cf       	rjmp	.-2      	; 0x3df6 <__stop_program>
